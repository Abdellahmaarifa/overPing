version: '3.7'
services:
  ##############

  ## RABBITMQ ##
  rabbitmq:
    image: rabbitmq:3-management 
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}
      - MESSAGE_BUS=amqp://rabbitmq
    restart: always
    networks:
      - webapp
    ports:
      - "${RABBIT_MQ_PORT}:5672"
      - ${RABBITMQ_AMQP_PORT}:15672
    container_name: rabbitmq

  # ## POSTGRES ##
  # postgres_db:
  #   image: postgres
  #   networks:
  #     - database
  #   environment:
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=admin
  #     - POSTGRES_DB=demo
  #   restart: always
  #   volumes:
  #     - ./database/data/dev:/var/lib/postgresql/data
  #   container_name: postgres_db
  # ##############
  # ## SERVER ##
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
      target: development
    command: npm run start:dev gateway
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${GATEWAY_PORT}:5500
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq
    restart: always
    container_name: gateway
  # #############
  # ## AUTH SERVICE ##
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${AUTH_PORT}:3001
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq
      - gateway
    restart: always
    container_name: auth
  # #############
  # ## CLIENT ##
  # client:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./client/.env
  #   volumes:
  #     - ./client/node_modules:/app/node_modules
  #     - ./client/src:/app/src
  #     - ./client/public:/app/public
  #   networks:
  #     - webapp
  #   ports:
  #     - 5173:5173
  #   command: npm run dev
  #   stdin_open: true
  #   restart: always
  #   container_name: client
networks:
  webapp:
    driver: bridge
  database:
    driver: bridge
