/// <reference types="node" />
/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { Readable } from 'stream';
export interface UploadOptions {
    maxFieldSize?: number | undefined;
    maxFileSize?: number | undefined;
    maxFiles?: number | undefined;
    environment?: 'lambda' | 'gcf' | 'azure';
}
export interface GraphQLOperation {
    query: string;
    operationName?: null | string | undefined;
    variables?: null | unknown | undefined | any;
}
export type IncomingReq = Partial<IncomingMessage> & {
    body?: string;
    rawBody?: string;
    req?: any;
    pipe?: any;
    unpipe?: any;
    once?: any;
    resume?: any;
};
/**
 * Processes a [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).
 * It parses the `operations` and `map` fields to create an
 * [`Upload`]{@link Upload} instance for each expected file upload, placing
 * references wherever the file is expected in the
 * [GraphQL operation]{@link GraphQLOperation} for the
 * [`Upload` scalar]{@link GraphQLUpload} to derive its value. Error objects
 * have HTTP `status` property and an appropriate HTTP error `name` property.
 * @kind function
 * @name processRequest
 * @type {ProcessRequestOptions.processRequest}
 * @example <caption>Ways to `import`.</caption>
 * ```js
 * import { processRequest } from 'graphql-upload-minimal';
 * ```
 *
 * ```js
 * import processRequest from 'graphql-upload-minimal/public/processRequest.js';
 * ```
 * @example <caption>Ways to `require`.</caption>
 * ```js
 * const { processRequest } = require('graphql-upload-minimal');
 * ```
 *
 * ```js
 * const processRequest = require('graphql-upload-minimal/public/processRequest');
 * ```
 */
export declare function processRequest<T = any>(req?: IncomingReq | Readable, res?: Partial<ServerResponse>, uploadOptions?: UploadOptions): Promise<GraphQLOperation | GraphQLOperation[] | T>;
