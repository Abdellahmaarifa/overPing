import { Entity } from './Entity';
export declare class Table<T extends Entity> {
    private name;
    private file;
    private records;
    constructor(name: string, file: string);
    /**
     * Inserts a new record.
     * @param recordData an object containing all record properties but without id.
     * that will be auto-generated.
     * @returns the new record, with an auto-generated `id`.
     */
    create(recordData: Omit<T, 'id'>): Promise<T>;
    /**
     * Deletes the record with the given id.
     * @param id the record id.
     * @returns the deleted record.
     */
    delete(id: string): Promise<T>;
    /**
     * Finds an record by its id.
     * @param id the record id.
     * @returns the record with the given id, or `undefined` if not found.
     */
    findById(id: string): Promise<T | undefined>;
    /**
     * Finds the first record matching the given predicate.
     * @param predicate a predicate function, returning `true` for the desired
     * record and `false` otherwise.
     * @returns the record, or `undefined` if not found.
     */
    findOne(predicate: (record: T) => boolean): Promise<T | undefined>;
    /**
     * Finds all records, or only those matching the given `predicate`.
     * @param predicate an optional predicate function, returning `true` for the
     * records that should be included and `false` otherwise.
     * @returns the record, or `undefined` if not found.
     */
    findAll(predicate?: (record: T) => boolean): Promise<T[]>;
    /**
     * Updates a record, replacing the one with the same `id`.
     * @param record the modified object.
     * @returns the modified object.
     */
    update(record: T): Promise<T>;
    private getRecords;
    private findIndex;
    private mutate;
}
