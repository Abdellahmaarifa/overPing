import{MessageChannel as S,isMainThread as F}from"worker_threads";import{i as N,s as U}from"../node-features-a792cc3d.mjs";import v from"module";import{installSourceMapSupport as P}from"../source-map.mjs";import g from"path";import{fileURLToPath as _,pathToFileURL as A}from"url";import{t as D,a as L}from"../index-a948fc61.mjs";import{r as b}from"../resolve-ts-path-a8cb04a4.mjs";import{parseTsconfig as x,getTsconfig as J,createFilesMatcher as I,createPathsMatcher as $}from"get-tsconfig";import T from"fs";import"source-map-support";import"esbuild";import"crypto";import"os";const C=()=>{const{port1:t,port2:s}=new S;P(t),process.send&&t.addListener("message",r=>{r.type==="dependency"&&process.send(r)}),t.unref(),v.register("./index.mjs",{parentURL:import.meta.url,data:{port:s},transferList:[s]})},m=new Map;async function W(t){if(m.has(t))return m.get(t);if(!await T.promises.access(t).then(()=>!0,()=>!1)){m.set(t,void 0);return}const r=await T.promises.readFile(t,"utf8");try{const o=JSON.parse(r);return m.set(t,o),o}catch{throw new Error(`Error parsing: ${t}`)}}async function q(t){let s=new URL("package.json",t);for(;!s.pathname.endsWith("/node_modules/package.json");){const r=_(s),o=await W(r);if(o)return o;const n=s;if(s=new URL("../package.json",s),s.pathname===n.pathname)break}}async function G(t){var s;const r=await q(t);return(s=r==null?void 0:r.type)!=null?s:"commonjs"}const f=process.env.TSX_TSCONFIG_PATH?{path:g.resolve(process.env.TSX_TSCONFIG_PATH),config:x(process.env.TSX_TSCONFIG_PATH)}:J(),H=f&&I(f),E=f&&$(f),k="file://",h=/\.([cm]?ts|[tj]sx)($|\?)/,X=/\.json(?:$|\?)/,K=t=>{const s=g.extname(t);if(s===".json")return"json";if(s===".mjs"||s===".mts")return"module";if(s===".cjs"||s===".cts")return"commonjs"},Q=t=>{const s=K(t);if(s)return s;if(h.test(t))return G(t)},R=P(),M=/\/(?:$|\?)/;let u,d=process.send?process.send.bind(process):void 0;const z=async t=>{if(!t)throw new Error(`tsx must be loaded with --import instead of --loader
The --loader flag was deprecated in Node v20.6.0`);const{port:s}=t;u=s,d=s.postMessage.bind(s)},B=({port:t})=>(u=t,d=t.postMessage.bind(t),`
	const require = getBuiltin('module').createRequire("${import.meta.url}");
	require('tsx/source-map').installSourceMapSupport(port);
	if (process.send) {
		port.addListener('message', (message) => {
			if (message.type === 'dependency') {
				process.send(message);
			}
		});
	}
	port.unref(); // Allows process to exit without waiting for port to close
	`),l=async(t,s,r)=>{const o=await t(s,r);return!o.format&&o.url.startsWith(k)&&(o.format=await Q(o.url)),o},V=[".js",".json",".ts",".tsx",".jsx"];async function y(t,s,r){const[o,n]=t.split("?");let c;for(const a of V)try{return await l(r,o+a+(n?`?${n}`:""),s)}catch(e){if(c===void 0&&e instanceof Error){const{message:i}=e;e.message=e.message.replace(`${a}'`,"'"),e.stack=e.stack.replace(i,e.message),c=e}}throw c}async function j(t,s,r){const o=M.test(t),n=o?"index":"/index",[c,a]=t.split("?");try{return await y(c+n+(a?`?${a}`:""),s,r)}catch(e){if(!o)try{return await y(t,s,r)}catch{}const i=e,{message:p}=i;throw i.message=i.message.replace(`${n.replace("/",g.sep)}'`,"'"),i.stack=i.stack.replace(p,i.message),i}}const Y=/^\.{1,2}\//,O=async function(t,s,r,o){var n;if(M.test(t))return await j(t,s,r);const c=t.startsWith(k)||Y.test(t);if(E&&!c&&!((n=s.parentURL)!=null&&n.includes("/node_modules/"))){const a=E(t);for(const e of a)try{return await O(A(e).toString(),s,r)}catch{}}if(h.test(s.parentURL)){const a=b(t);if(a)for(const e of a)try{return await l(r,e,s)}catch(i){const{code:p}=i;if(p!=="ERR_MODULE_NOT_FOUND"&&p!=="ERR_PACKAGE_PATH_NOT_EXPORTED")throw i}}try{return await l(r,t,s)}catch(a){if(a instanceof Error&&!o){const{code:e}=a;if(e==="ERR_UNSUPPORTED_DIR_IMPORT")try{return await j(t,s,r)}catch(i){if(i.code!=="ERR_PACKAGE_IMPORT_NOT_DEFINED")throw i}if(e==="ERR_MODULE_NOT_FOUND")try{return await y(t,s,r)}catch{}}throw a}},w=N?"importAttributes":"importAssertions",Z=async function(t,s,r){var o;d&&d({type:"dependency",path:t}),X.test(t)&&(s[w]||(s[w]={}),s[w].type="json");const n=await r(t,s);if(!n.source)return n;const c=t.startsWith("file://")?_(t):t,a=n.source.toString();if(n.format==="json"||h.test(t)){const e=await D(a,c,{tsconfigRaw:(o=H)==null?void 0:o(c)});return{format:"module",source:R(e,t,u)}}if(n.format==="module"){const e=L(c,a);e&&(n.source=R(e,t,u))}return n};U&&F&&C();export{B as globalPreload,z as initialize,Z as load,O as resolve};
