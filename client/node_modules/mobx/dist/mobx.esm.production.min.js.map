{"version":3,"file":"mobx.esm.production.min.js","sources":["../src/errors.ts","../src/utils/global.ts","../src/utils/utils.ts","../src/api/decorators.ts","../src/types/overrideannotation.ts","../src/core/atom.ts","../src/types/modifiers.ts","../src/types/actionannotation.ts","../src/types/flowannotation.ts","../src/types/computedannotation.ts","../src/types/observableannotation.ts","../src/types/autoannotation.ts","../src/api/observable.ts","../src/core/action.ts","../src/core/derivation.ts","../src/core/globalstate.ts","../src/core/observable.ts","../src/core/reaction.ts","../src/core/spy.ts","../src/api/action.ts","../src/api/autorun.ts","../src/api/become-observed.ts","../src/api/configure.ts","../src/api/extendobservable.ts","../src/api/extras.ts","../src/api/flow.ts","../src/api/intercept-read.ts","../src/api/intercept.ts","../src/api/iscomputed.ts","../src/api/isobservable.ts","../src/api/object-api.ts","../src/api/observe.ts","../src/api/tojs.ts","../src/api/trace.ts","../src/api/transaction.ts","../src/api/when.ts","../src/types/dynamicobject.ts","../src/types/intercept-utils.ts","../src/types/listen-utils.ts","../src/api/makeObservable.ts","../src/types/observablearray.ts","../src/types/observableobject.ts","../src/types/legacyobservablearray.ts","../src/types/type-utils.ts","../src/utils/eq.ts","../src/utils/iterable.ts","../src/utils/comparer.ts","../src/api/computed.ts","../src/types/observablevalue.ts","../src/core/computedvalue.ts","../src/types/observablemap.ts","../src/types/observableset.ts","../src/mobx.ts"],"sourcesContent":["const niceErrors = {\n    0: `Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'`,\n    1(annotationType, key: PropertyKey) {\n        return `Cannot apply '${annotationType}' to '${key.toString()}': Field not found.`\n    },\n    /*\n    2(prop) {\n        return `invalid decorator for '${prop.toString()}'`\n    },\n    3(prop) {\n        return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\n    },\n    4(prop) {\n        return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\n    },\n    */\n    5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n    6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n    7: \"'entries()' can only be used on observable objects, arrays and maps\",\n    8: \"'set()' can only be used on observable objects, arrays and maps\",\n    9: \"'remove()' can only be used on observable objects, arrays and maps\",\n    10: \"'has()' can only be used on observable objects, arrays and maps\",\n    11: \"'get()' can only be used on observable objects, arrays and maps\",\n    12: `Invalid annotation`,\n    13: `Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    14: \"Intercept handlers should return nothing or a change object\",\n    15: `Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    16: `Modification exception: the internal structure of an observable array was changed.`,\n    17(index, length) {\n        return `[mobx.array] Index out of bounds, ${index} is larger than ${length}`\n    },\n    18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n    19(other) {\n        return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name\n    },\n    20(other) {\n        return \"Cannot initialize map from \" + other\n    },\n    21(dataStructure) {\n        return `Cannot convert to map from '${dataStructure}'`\n    },\n    22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n    23: \"It is not possible to get index atoms from arrays\",\n    24(thing) {\n        return \"Cannot obtain administration from \" + thing\n    },\n    25(property, name) {\n        return `the entry '${property}' does not exist in the observable map '${name}'`\n    },\n    26: \"please specify a property\",\n    27(property, name) {\n        return `no observable property '${property.toString()}' found on the observable object '${name}'`\n    },\n    28(thing) {\n        return \"Cannot obtain atom from \" + thing\n    },\n    29: \"Expecting some object\",\n    30: \"invalid action stack. did you forget to finish an action?\",\n    31: \"missing option for computed: get\",\n    32(name, derivation) {\n        return `Cycle detected in computation ${name}: ${derivation}`\n    },\n    33(name) {\n        return `The setter of computed value '${name}' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?`\n    },\n    34(name) {\n        return `[ComputedValue '${name}'] It is not possible to assign a new value to a computed value.`\n    },\n    35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n    36: \"isolateGlobalState should be called before MobX is running any reactions\",\n    37(method) {\n        return `[mobx] \\`observableArray.${method}()\\` mutates the array in-place, which is not allowed inside a derivation. Use \\`array.slice().${method}()\\` instead`\n    },\n    38: \"'ownKeys()' can only be used on observable objects\",\n    39: \"'defineProperty()' can only be used on observable objects\"\n} as const\n\nconst errors: typeof niceErrors = __DEV__ ? niceErrors : ({} as any)\n\nexport function die(error: string | keyof typeof errors, ...args: any[]): never {\n    if (__DEV__) {\n        let e: any = typeof error === \"string\" ? error : errors[error]\n        if (typeof e === \"function\") e = e.apply(null, args as any)\n        throw new Error(`[MobX] ${e}`)\n    }\n    throw new Error(\n        typeof error === \"number\"\n            ? `[MobX] minified error nr: ${error}${\n                  args.length ? \" \" + args.map(String).join(\",\") : \"\"\n              }. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts`\n            : `[MobX] ${error}`\n    )\n}\n","declare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis\n    }\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { globalState, die } from \"../internal\"\n\n// We shorten anything used > 5 times\nexport const assign = Object.assign\nexport const getDescriptor = Object.getOwnPropertyDescriptor\nexport const defineProperty = Object.defineProperty\nexport const objectPrototype = Object.prototype\n\nexport const EMPTY_ARRAY = []\nObject.freeze(EMPTY_ARRAY)\n\nexport const EMPTY_OBJECT = {}\nObject.freeze(EMPTY_OBJECT)\n\nexport interface Lambda {\n    (): void\n    name?: string\n}\n\nconst hasProxy = typeof Proxy !== \"undefined\"\nconst plainObjectString = Object.toString()\n\nexport function assertProxies() {\n    if (!hasProxy) {\n        die(\n            __DEV__\n                ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\"\n                : \"Proxy not available\"\n        )\n    }\n}\n\nexport function warnAboutProxyRequirement(msg: string) {\n    if (__DEV__ && globalState.verifyProxies) {\n        die(\n            \"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" +\n                msg\n        )\n    }\n}\n\nexport function getNextId() {\n    return ++globalState.mobxGuid\n}\n\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nexport function once(func: Lambda): Lambda {\n    let invoked = false\n    return function () {\n        if (invoked) {\n            return\n        }\n        invoked = true\n        return (func as any).apply(this, arguments)\n    }\n}\n\nexport const noop = () => {}\n\nexport function isFunction(fn: any): fn is Function {\n    return typeof fn === \"function\"\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\"\n}\n\nexport function isStringish(value: any): value is string | number | symbol {\n    const t = typeof value\n    switch (t) {\n        case \"string\":\n        case \"symbol\":\n        case \"number\":\n            return true\n    }\n    return false\n}\n\nexport function isObject(value: any): value is Object {\n    return value !== null && typeof value === \"object\"\n}\n\nexport function isPlainObject(value: any) {\n    if (!isObject(value)) {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    if (proto == null) {\n        return true\n    }\n    const protoConstructor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n    return (\n        typeof protoConstructor === \"function\" && protoConstructor.toString() === plainObjectString\n    )\n}\n\n// https://stackoverflow.com/a/37865170\nexport function isGenerator(obj: any): boolean {\n    const constructor = obj?.constructor\n    if (!constructor) {\n        return false\n    }\n    if (\n        \"GeneratorFunction\" === constructor.name ||\n        \"GeneratorFunction\" === constructor.displayName\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function addHiddenProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value\n    })\n}\n\nexport function addHiddenFinalProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value\n    })\n}\n\nexport function createInstanceofPredicate<T>(\n    name: string,\n    theClass: new (...args: any[]) => T\n): (x: any) => x is T {\n    const propName = \"isMobX\" + name\n    theClass.prototype[propName] = true\n    return function (x) {\n        return isObject(x) && x[propName] === true\n    } as any\n}\n\nexport function isES6Map(thing: any): thing is Map<any, any> {\n    return thing instanceof Map\n}\n\nexport function isES6Set(thing: any): thing is Set<any> {\n    return thing instanceof Set\n}\n\nconst hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\"\n\n/**\n * Returns the following: own enumerable keys and symbols.\n */\nexport function getPlainObjectKeys(object: any) {\n    const keys = Object.keys(object)\n    // Not supported in IE, so there are not going to be symbol props anyway...\n    if (!hasGetOwnPropertySymbols) {\n        return keys\n    }\n    const symbols = Object.getOwnPropertySymbols(object)\n    if (!symbols.length) {\n        return keys\n    }\n    return [...keys, ...symbols.filter(s => objectPrototype.propertyIsEnumerable.call(object, s))]\n}\n\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nexport const ownKeys: (target: any) => Array<string | symbol> =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : hasGetOwnPropertySymbols\n        ? obj => Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj) as any)\n        : /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport function stringifyKey(key: any): string {\n    if (typeof key === \"string\") {\n        return key\n    }\n    if (typeof key === \"symbol\") {\n        return key.toString()\n    }\n    return new String(key).toString()\n}\n\nexport function toPrimitive(value: any) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value\n}\n\nexport function hasProp(target: Object, prop: PropertyKey): boolean {\n    return objectPrototype.hasOwnProperty.call(target, prop)\n}\n\n// From Immer utils\nexport const getOwnPropertyDescriptors =\n    Object.getOwnPropertyDescriptors ||\n    function getOwnPropertyDescriptors(target: any) {\n        // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n        const res: any = {}\n        // Note: without polyfill for ownKeys, symbols won't be picked up\n        ownKeys(target).forEach(key => {\n            res[key] = getDescriptor(target, key)\n        })\n        return res\n    }\n","import { Annotation, addHiddenProp, AnnotationsMap, hasProp, die, isOverride } from \"../internal\"\n\nimport type { Decorator } from \"../types/decorator_fills\"\n\nexport const storedAnnotationsSymbol = Symbol(\"mobx-stored-annotations\")\n\n/**\n * Creates a function that acts as\n * - decorator\n * - annotation object\n */\nexport function createDecoratorAnnotation<D extends Decorator = Decorator>(\n    annotation: Annotation\n): PropertyDecorator & Annotation & D {\n    function decorator(target, property) {\n        if (is20223Decorator(property)) {\n            return annotation.decorate_20223_(target, property)\n        } else {\n            storeAnnotation(target, property, annotation)\n        }\n    }\n    return Object.assign(decorator, annotation) as any\n}\n\n/**\n * Stores annotation to prototype,\n * so it can be inspected later by `makeObservable` called from constructor\n */\nexport function storeAnnotation(prototype: any, key: PropertyKey, annotation: Annotation) {\n    if (!hasProp(prototype, storedAnnotationsSymbol)) {\n        addHiddenProp(prototype, storedAnnotationsSymbol, {\n            // Inherit annotations\n            ...prototype[storedAnnotationsSymbol]\n        })\n    }\n    // @override must override something\n    if (__DEV__ && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        die(\n            `'${fieldName}' is decorated with 'override', ` +\n                `but no such decorated member was found on prototype.`\n        )\n    }\n    // Cannot re-decorate\n    assertNotDecorated(prototype, annotation, key)\n\n    // Ignore override\n    if (!isOverride(annotation)) {\n        prototype[storedAnnotationsSymbol][key] = annotation\n    }\n}\n\nfunction assertNotDecorated(prototype: object, annotation: Annotation, key: PropertyKey) {\n    if (__DEV__ && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        const currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '@${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already decorated with '@${currentAnnotationType}'.` +\n                `\\nRe-decorating fields is not allowed.` +\n                `\\nUse '@override' decorator for methods overridden by subclass.`\n        )\n    }\n}\n\n/**\n * Collects annotations from prototypes and stores them on target (instance)\n */\nexport function collectStoredAnnotations(target): AnnotationsMap<any, any> {\n    if (!hasProp(target, storedAnnotationsSymbol)) {\n        // if (__DEV__ && !target[storedAnnotationsSymbol]) {\n        //     die(\n        //         `No annotations were passed to makeObservable, but no decorated members have been found either`\n        //     )\n        // }\n        // We need a copy as we will remove annotation from the list once it's applied.\n        addHiddenProp(target, storedAnnotationsSymbol, { ...target[storedAnnotationsSymbol] })\n    }\n    return target[storedAnnotationsSymbol]\n}\n\nexport function is20223Decorator(context): context is DecoratorContext {\n    return typeof context == \"object\" && typeof context[\"kind\"] == \"string\"\n}\n\nexport function assert20223DecoratorType(\n    context: DecoratorContext,\n    types: DecoratorContext[\"kind\"][]\n) {\n    if (__DEV__ && !types.includes(context.kind)) {\n        die(\n            `The decorator applied to '${String(context.name)}' cannot be used on a ${\n                context.kind\n            } element`\n        )\n    }\n}\n","import {\n    die,\n    Annotation,\n    hasProp,\n    createDecoratorAnnotation,\n    ObservableObjectAdministration,\n    MakeResult\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"./decorator_fills\"\n\nconst OVERRIDE = \"override\"\n\nexport const override: Annotation & PropertyDecorator & ClassMethodDecorator =\n    createDecoratorAnnotation({\n        annotationType_: OVERRIDE,\n        make_,\n        extend_,\n        decorate_20223_\n    })\n\nexport function isOverride(annotation: Annotation): boolean {\n    return annotation.annotationType_ === OVERRIDE\n}\n\nfunction make_(this: Annotation, adm: ObservableObjectAdministration, key): MakeResult {\n    // Must not be plain object\n    if (__DEV__ && adm.isPlainObject_) {\n        die(\n            `Cannot apply '${this.annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${this.annotationType_}' cannot be used on plain objects.`\n        )\n    }\n    // Must override something\n    if (__DEV__ && !hasProp(adm.appliedAnnotations_!, key)) {\n        die(\n            `'${adm.name_}.${key.toString()}' is annotated with '${this.annotationType_}', ` +\n                `but no such annotated member was found on prototype.`\n        )\n    }\n    return MakeResult.Cancel\n}\n\nfunction extend_(this: Annotation, adm, key, descriptor, proxyTrap): boolean {\n    die(`'${this.annotationType_}' can only be used with 'makeObservable'`)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: DecoratorContext) {\n    console.warn(`'${this.annotationType_}' cannot be used with decorators - this is a no-op`)\n}\n","import {\n    IDerivationState_,\n    IObservable,\n    IDerivation,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    noop,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    propagateChanged,\n    reportObserved,\n    startBatch,\n    Lambda,\n    globalState\n} from \"../internal\"\n\nexport const $mobx = Symbol(\"mobx administration\")\n\nexport interface IAtom extends IObservable {\n    reportObserved(): boolean\n    reportChanged(): void\n}\n\nexport class Atom implements IAtom {\n    isPendingUnobservation_ = false // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n    isBeingObserved_ = false\n    observers_ = new Set<IDerivation>()\n\n    batchId_: number\n    diffValue_ = 0\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.NOT_TRACKING_\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    constructor(public name_ = __DEV__ ? \"Atom@\" + getNextId() : \"Atom\") {\n        this.batchId_ = globalState.inBatch ? globalState.batchId : NaN\n    }\n\n    // onBecomeObservedListeners\n    public onBOL: Set<Lambda> | undefined\n    // onBecomeUnobservedListeners\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Invoke this method to notify mobx that your atom has been used somehow.\n     * Returns true if there is currently a reactive context.\n     */\n    public reportObserved(): boolean {\n        return reportObserved(this)\n    }\n\n    /**\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n     */\n    public reportChanged() {\n        if (!globalState.inBatch || this.batchId_ !== globalState.batchId) {\n            // We could update state version only at the end of batch,\n            // but we would still have to switch some global flag here to signal a change.\n            globalState.stateVersion =\n                globalState.stateVersion < Number.MAX_SAFE_INTEGER\n                    ? globalState.stateVersion + 1\n                    : Number.MIN_SAFE_INTEGER\n            // Avoids the possibility of hitting the same globalState.batchId when it cycled through all integers (necessary?)\n            this.batchId_ = NaN\n        }\n\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n\n    toString() {\n        return this.name_\n    }\n}\n\nexport const isAtom = createInstanceofPredicate(\"Atom\", Atom)\n\nexport function createAtom(\n    name: string,\n    onBecomeObservedHandler: () => void = noop,\n    onBecomeUnobservedHandler: () => void = noop\n): IAtom {\n    const atom = new Atom(name)\n    // default `noop` listener will not initialize the hook Set\n    if (onBecomeObservedHandler !== noop) {\n        onBecomeObserved(atom, onBecomeObservedHandler)\n    }\n\n    if (onBecomeUnobservedHandler !== noop) {\n        onBecomeUnobserved(atom, onBecomeUnobservedHandler)\n    }\n    return atom\n}\n","import {\n    deepEqual,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    isPlainObject,\n    observable,\n    die,\n    isAction,\n    autoAction,\n    flow,\n    isFlow,\n    isGenerator\n} from \"../internal\"\n\nexport interface IEnhancer<T> {\n    (newValue: T, oldValue: T | undefined, name: string): T\n}\n\nexport function deepEnhancer(v, _, name) {\n    // it is an observable already, done\n    if (isObservable(v)) {\n        return v\n    }\n\n    // something that can be converted and mutated?\n    if (Array.isArray(v)) {\n        return observable.array(v, { name })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name })\n    }\n    if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n        if (isGenerator(v)) {\n            return flow(v)\n        } else {\n            return autoAction(name, v)\n        }\n    }\n    return v\n}\n\nexport function shallowEnhancer(v, _, name): any {\n    if (v === undefined || v === null) {\n        return v\n    }\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n        return v\n    }\n    if (Array.isArray(v)) {\n        return observable.array(v, { name, deep: false })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name, deep: false })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name, deep: false })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name, deep: false })\n    }\n\n    if (__DEV__) {\n        die(\n            \"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\"\n        )\n    }\n}\n\nexport function referenceEnhancer(newValue?) {\n    // never turn into an observable\n    return newValue\n}\n\nexport function refStructEnhancer(v, oldValue): any {\n    if (__DEV__ && isObservable(v)) {\n        die(`observable.struct should not be used with observable values`)\n    }\n    if (deepEqual(v, oldValue)) {\n        return oldValue\n    }\n    return v\n}\n","import {\n    ObservableObjectAdministration,\n    createAction,\n    isAction,\n    defineProperty,\n    die,\n    isFunction,\n    Annotation,\n    globalState,\n    MakeResult,\n    assert20223DecoratorType,\n    storeAnnotation\n} from \"../internal\"\n\nexport function createActionAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // bound\n    if (this.options_?.bound) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Break\n    }\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    if (isAction(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false)\n    defineProperty(source, key, actionDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor)\n    return adm.defineProperty_(key, actionDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: DecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\", \"field\"])\n    }\n    const { kind, name, addInitializer } = context\n    const ann = this\n\n    const _createAction = m =>\n        createAction(ann.options_?.name ?? name!.toString(), m, ann.options_?.autoAction ?? false)\n\n    // Backwards/Legacy behavior, expects makeObservable(this)\n    if (kind == \"field\") {\n        addInitializer(function () {\n            storeAnnotation(this, name, ann)\n        })\n        return\n    }\n\n    if (kind == \"method\") {\n        if (!isAction(mthd)) {\n            mthd = _createAction(mthd)\n        }\n\n        if (this.options_?.bound) {\n            addInitializer(function () {\n                const self = this as any\n                const bound = self[name].bind(self)\n                bound.isMobxAction = true\n                self[name] = bound\n            })\n        }\n\n        return mthd\n    }\n\n    die(\n        `Cannot apply '${ann.annotationType_}' to '${String(name)}' (kind: ${kind}):` +\n            `\\n'${ann.annotationType_}' can only be used on properties with a function value.`\n    )\n}\n\nfunction assertActionDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a function value.`\n        )\n    }\n}\n\nexport function createActionDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n) {\n    assertActionDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    if (annotation.options_?.bound) {\n        value = value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return {\n        value: createAction(\n            annotation.options_?.name ?? key.toString(),\n            value,\n            annotation.options_?.autoAction ?? false,\n            // https://github.com/mobxjs/mobx/discussions/3140\n            annotation.options_?.bound ? adm.proxy_ ?? adm.target_ : undefined\n        ),\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    Annotation,\n    defineProperty,\n    die,\n    flow,\n    isFlow,\n    isFunction,\n    globalState,\n    MakeResult,\n    hasProp,\n    assert20223DecoratorType\n} from \"../internal\"\n\nexport function createFlowAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    // bound - must annotate protos to support super.flow()\n    if (this.options_?.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n        if (this.extend_(adm, key, descriptor, false) === null) {\n            return MakeResult.Cancel\n        }\n    }\n    if (isFlow(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false)\n    defineProperty(source, key, flowDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, this.options_?.bound)\n    return adm.defineProperty_(key, flowDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: ClassMethodDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\"])\n    }\n    const { name, addInitializer } = context\n\n    if (!isFlow(mthd)) {\n        mthd = flow(mthd)\n    }\n\n    if (this.options_?.bound) {\n        addInitializer(function () {\n            const self = this as any\n            const bound = self[name].bind(self)\n            bound.isMobXFlow = true\n            self[name] = bound\n        })\n    }\n\n    return mthd\n}\n\nfunction assertFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a generator function value.`\n        )\n    }\n}\n\nfunction createFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    bound: boolean,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n): PropertyDescriptor {\n    assertFlowDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    // In case of flow.bound, the descriptor can be from already annotated prototype\n    if (!isFlow(value)) {\n        value = flow(value)\n    }\n    if (bound) {\n        // We do not keep original function around, so we bind the existing flow\n        value = value.bind(adm.proxy_ ?? adm.target_)\n        // This is normally set by `flow`, but `bind` returns new function...\n        value.isMobXFlow = true\n    }\n    return {\n        value,\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    $mobx,\n    asObservableObject,\n    ComputedValue\n} from \"../internal\"\n\nexport function createComputedAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertComputedDescriptor(adm, this, key, descriptor)\n    return adm.defineComputedProperty_(\n        key,\n        {\n            ...this.options_,\n            get: descriptor.get,\n            set: descriptor.set\n        },\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(this: Annotation, get, context: ClassGetterDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"getter\"])\n    }\n    const ann = this\n    const { name: key, addInitializer } = context\n\n    addInitializer(function () {\n        const adm: ObservableObjectAdministration = asObservableObject(this)[$mobx]\n        const options = {\n            ...ann.options_,\n            get,\n            context: this\n        }\n        options.name ||= __DEV__\n            ? `${adm.name_}.${key.toString()}`\n            : `ObservableObject.${key.toString()}`\n        adm.values_.set(key, new ComputedValue(options))\n    })\n\n    return function () {\n        return this[$mobx].getObservablePropValue_(key)\n    }\n}\n\nfunction assertComputedDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { get }: PropertyDescriptor\n) {\n    if (__DEV__ && !get) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on getter(+setter) properties.`\n        )\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    deepEnhancer,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    ObservableValue,\n    asObservableObject,\n    $mobx\n} from \"../internal\"\n\nexport function createObservableAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertObservableDescriptor(adm, this, key, descriptor)\n    return adm.defineObservableProperty_(\n        key,\n        descriptor.value,\n        this.options_?.enhancer ?? deepEnhancer,\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(\n    this: Annotation,\n    desc,\n    context: ClassAccessorDecoratorContext | ClassFieldDecoratorContext\n) {\n    if (__DEV__) {\n        if (context.kind === \"field\") {\n            throw die(\n                `Please use \\`@observable accessor ${String(\n                    context.name\n                )}\\` instead of \\`@observable ${String(context.name)}\\``\n            )\n        }\n        assert20223DecoratorType(context, [\"accessor\"])\n    }\n\n    const ann = this\n    const { kind, name } = context\n\n    // The laziness here is not ideal... It's a workaround to how 2022.3 Decorators are implemented:\n    //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).\n    //   This means that, if we were to do our stuff in an `addInitializer`, we'd attempt to read a private slot\n    //   before it has been initialized. The runtime doesn't like that and throws a `Cannot read private member\n    //   from an object whose class did not declare it` error.\n    // TODO: it seems that this will not be required anymore in the final version of the spec\n    // See TODO: link\n    const initializedObjects = new WeakSet()\n\n    function initializeObservable(target, value) {\n        const adm: ObservableObjectAdministration = asObservableObject(target)[$mobx]\n        const observable = new ObservableValue(\n            value,\n            ann.options_?.enhancer ?? deepEnhancer,\n            __DEV__ ? `${adm.name_}.${name.toString()}` : `ObservableObject.${name.toString()}`,\n            false\n        )\n        adm.values_.set(name, observable)\n        initializedObjects.add(target)\n    }\n\n    if (kind == \"accessor\") {\n        return {\n            get() {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, desc.get.call(this))\n                }\n                return this[$mobx].getObservablePropValue_(name)\n            },\n            set(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return this[$mobx].setObservablePropValue_(name, value)\n            },\n            init(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return value\n            }\n        }\n    }\n\n    return\n}\n\nfunction assertObservableDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n) {\n    if (__DEV__ && !(\"value\" in descriptor)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' cannot be used on getter/setter properties`\n        )\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    observable,\n    Annotation,\n    defineProperty,\n    createAction,\n    globalState,\n    flow,\n    computed,\n    autoAction,\n    isGenerator,\n    MakeResult,\n    die\n} from \"../internal\"\n\nconst AUTO = \"true\"\n\nexport const autoAnnotation: Annotation = createAutoAnnotation()\n\nexport function createAutoAnnotation(options?: object): Annotation {\n    return {\n        annotationType_: AUTO,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.make_(adm, key, descriptor, source)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.make_\n        const set = createAction(key.toString(), descriptor.set) as (v: any) => void\n        // own\n        if (source === adm.target_) {\n            return adm.defineProperty_(key, {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set\n            }) === null\n                ? MakeResult.Cancel\n                : MakeResult.Continue\n        }\n        // proto\n        defineProperty(source, key, {\n            configurable: true,\n            set\n        })\n        return MakeResult.Continue\n    }\n    // function on proto -> autoAction/flow\n    if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n        if (isGenerator(descriptor.value)) {\n            const flowAnnotation = this.options_?.autoBind ? flow.bound : flow\n            return flowAnnotation.make_(adm, key, descriptor, source)\n        }\n        const actionAnnotation = this.options_?.autoBind ? autoAction.bound : autoAction\n        return actionAnnotation.make_(adm, key, descriptor, source)\n    }\n    // other -> observable\n    // Copy props from proto as well, see test:\n    // \"decorate should work with Object.create\"\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return observableAnnotation.make_(adm, key, descriptor, source)\n}\n\nfunction extend_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.extend_(adm, key, descriptor, proxyTrap)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.extend_\n        return adm.defineProperty_(\n            key,\n            {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set: createAction(key.toString(), descriptor.set) as (v: any) => void\n            },\n            proxyTrap\n        )\n    }\n    // other -> observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    return observableAnnotation.extend_(adm, key, descriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: ClassGetterDecoratorContext) {\n    die(`'${this.annotationType_}' cannot be used as a decorator`)\n}\n","import {\n    IEnhancer,\n    IEqualsComparer,\n    IObservableArray,\n    IObservableMapInitialValues,\n    IObservableSetInitialValues,\n    IObservableValue,\n    ObservableMap,\n    ObservableSet,\n    ObservableValue,\n    asDynamicObservableObject,\n    createObservableArray,\n    deepEnhancer,\n    extendObservable,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isPlainObject,\n    referenceEnhancer,\n    Annotation,\n    shallowEnhancer,\n    refStructEnhancer,\n    AnnotationsMap,\n    asObservableObject,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    createLegacyArray,\n    globalState,\n    assign,\n    isStringish,\n    createObservableAnnotation,\n    createAutoAnnotation,\n    is20223Decorator,\n    initObservable\n} from \"../internal\"\n\nimport type { ClassAccessorDecorator, ClassFieldDecorator } from \"../types/decorator_fills\"\n\nexport const OBSERVABLE = \"observable\"\nexport const OBSERVABLE_REF = \"observable.ref\"\nexport const OBSERVABLE_SHALLOW = \"observable.shallow\"\nexport const OBSERVABLE_STRUCT = \"observable.struct\"\n\nexport type CreateObservableOptions = {\n    name?: string\n    equals?: IEqualsComparer<any>\n    deep?: boolean\n    defaultDecorator?: Annotation\n    proxy?: boolean\n    autoBind?: boolean\n}\n\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nexport const defaultCreateObservableOptions: CreateObservableOptions = {\n    deep: true,\n    name: undefined,\n    defaultDecorator: undefined,\n    proxy: true\n}\nObject.freeze(defaultCreateObservableOptions)\n\nexport function asCreateObservableOptions(thing: any): CreateObservableOptions {\n    return thing || defaultCreateObservableOptions\n}\n\nconst observableAnnotation = createObservableAnnotation(OBSERVABLE)\nconst observableRefAnnotation = createObservableAnnotation(OBSERVABLE_REF, {\n    enhancer: referenceEnhancer\n})\nconst observableShallowAnnotation = createObservableAnnotation(OBSERVABLE_SHALLOW, {\n    enhancer: shallowEnhancer\n})\nconst observableStructAnnotation = createObservableAnnotation(OBSERVABLE_STRUCT, {\n    enhancer: refStructEnhancer\n})\nconst observableDecoratorAnnotation =\n    createDecoratorAnnotation<ClassAccessorDecorator>(observableAnnotation)\n\nexport function getEnhancerFromOptions(options: CreateObservableOptions): IEnhancer<any> {\n    return options.deep === true\n        ? deepEnhancer\n        : options.deep === false\n        ? referenceEnhancer\n        : getEnhancerFromAnnotation(options.defaultDecorator)\n}\n\nexport function getAnnotationFromOptions(\n    options?: CreateObservableOptions\n): Annotation | undefined {\n    return options ? options.defaultDecorator ?? createAutoAnnotation(options) : undefined\n}\n\nexport function getEnhancerFromAnnotation(annotation?: Annotation): IEnhancer<any> {\n    return !annotation ? deepEnhancer : annotation.options_?.enhancer ?? deepEnhancer\n}\n\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    // @observable someProp; (2022.3 Decorators)\n    if (is20223Decorator(arg2)) {\n        return observableAnnotation.decorate_20223_(v, arg2)\n    }\n\n    // @observable someProp;\n    if (isStringish(arg2)) {\n        storeAnnotation(v, arg2, observableAnnotation)\n        return\n    }\n\n    // already observable - ignore\n    if (isObservable(v)) {\n        return v\n    }\n\n    // plain object\n    if (isPlainObject(v)) {\n        return observable.object(v, arg2, arg3)\n    }\n\n    // Array\n    if (Array.isArray(v)) {\n        return observable.array(v, arg2)\n    }\n\n    // Map\n    if (isES6Map(v)) {\n        return observable.map(v, arg2)\n    }\n\n    // Set\n    if (isES6Set(v)) {\n        return observable.set(v, arg2)\n    }\n\n    // other object - ignore\n    if (typeof v === \"object\" && v !== null) {\n        return v\n    }\n\n    // anything else\n    return observable.box(v, arg2)\n}\nassign(createObservable, observableDecoratorAnnotation)\n\nexport interface IObservableValueFactory {\n    <T>(value: T, options?: CreateObservableOptions): IObservableValue<T>\n    <T>(value?: T, options?: CreateObservableOptions): IObservableValue<T | undefined>\n}\n\nexport interface IObservableFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassAccessorDecorator,\n        ClassFieldDecorator {\n    // TODO: remove ClassFieldDecorator, this is only temporarily support for legacy decorators\n    <T = any>(value: T[], options?: CreateObservableOptions): IObservableArray<T>\n    <T = any>(value: Set<T>, options?: CreateObservableOptions): ObservableSet<T>\n    <K = any, V = any>(value: Map<K, V>, options?: CreateObservableOptions): ObservableMap<K, V>\n    <T extends object>(\n        value: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T\n\n    box: IObservableValueFactory\n    array: <T = any>(initialValues?: T[], options?: CreateObservableOptions) => IObservableArray<T>\n    set: <T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ) => ObservableSet<T>\n    map: <K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ) => ObservableMap<K, V>\n    object: <T = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ) => T\n\n    /**\n     * Decorator that creates an observable that only observes the references, but doesn't try to turn the assigned value into an observable.ts.\n     */\n    ref: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    /**\n     * Decorator that creates an observable converts its value (objects, maps or arrays) into a shallow observable structure\n     */\n    shallow: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    deep: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    struct: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n}\n\nconst observableFactories: IObservableFactory = {\n    box<T = any>(value: T, options?: CreateObservableOptions): IObservableValue<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals)\n    },\n    array<T = any>(initialValues?: T[], options?: CreateObservableOptions): IObservableArray<T> {\n        const o = asCreateObservableOptions(options)\n        return (\n            globalState.useProxies === false || o.proxy === false\n                ? createLegacyArray\n                : createObservableArray\n        )(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    map<K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ): ObservableMap<K, V> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableMap<K, V>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    set<T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ): ObservableSet<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableSet<T>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    object<T extends object = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T {\n        return initObservable(() =>\n            extendObservable(\n                globalState.useProxies === false || options?.proxy === false\n                    ? asObservableObject({}, options)\n                    : asDynamicObservableObject({}, options),\n                props,\n                decorators\n            )\n        )\n    },\n    ref: createDecoratorAnnotation(observableRefAnnotation),\n    shallow: createDecoratorAnnotation(observableShallowAnnotation),\n    deep: observableDecoratorAnnotation,\n    struct: createDecoratorAnnotation(observableStructAnnotation)\n} as any\n\n// eslint-disable-next-line\nexport var observable: IObservableFactory = assign(createObservable, observableFactories)\n","import {\n    IDerivation,\n    endBatch,\n    globalState,\n    isSpyEnabled,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    untrackedEnd,\n    untrackedStart,\n    isFunction,\n    allowStateReadsStart,\n    allowStateReadsEnd,\n    ACTION,\n    EMPTY_ARRAY,\n    die,\n    getDescriptor,\n    defineProperty\n} from \"../internal\"\n\n// we don't use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nlet currentActionId = 0\nlet nextActionId = 1\nconst isFunctionNameConfigurable = getDescriptor(() => {}, \"name\")?.configurable ?? false\n\n// we can safely recycle this object\nconst tmpNameDescriptor: PropertyDescriptor = {\n    value: \"action\",\n    configurable: true,\n    writable: false,\n    enumerable: false\n}\n\nexport function createAction(\n    actionName: string,\n    fn: Function,\n    autoAction: boolean = false,\n    ref?: Object\n): Function {\n    if (__DEV__) {\n        if (!isFunction(fn)) {\n            die(\"`action` can only be invoked on functions\")\n        }\n        if (typeof actionName !== \"string\" || !actionName) {\n            die(`actions should have valid names, got: '${actionName}'`)\n        }\n    }\n    function res() {\n        return executeAction(actionName, autoAction, fn, ref || this, arguments)\n    }\n    res.isMobxAction = true\n    if (isFunctionNameConfigurable) {\n        tmpNameDescriptor.value = actionName\n        defineProperty(res, \"name\", tmpNameDescriptor)\n    }\n    return res\n}\n\nexport function executeAction(\n    actionName: string,\n    canRunAsDerivation: boolean,\n    fn: Function,\n    scope?: any,\n    args?: IArguments\n) {\n    const runInfo = _startAction(actionName, canRunAsDerivation, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error_ = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n\nexport interface IActionRunInfo {\n    prevDerivation_: IDerivation | null\n    prevAllowStateChanges_: boolean\n    prevAllowStateReads_: boolean\n    notifySpy_: boolean\n    startTime_: number\n    error_?: any\n    parentActionId_: number\n    actionId_: number\n    runAsAction_?: boolean\n}\n\nexport function _startAction(\n    actionName: string,\n    canRunAsDerivation: boolean, // true for autoAction\n    scope: any,\n    args?: IArguments\n): IActionRunInfo {\n    const notifySpy_ = __DEV__ && isSpyEnabled() && !!actionName\n    let startTime_: number = 0\n    if (__DEV__ && notifySpy_) {\n        startTime_ = Date.now()\n        const flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY\n        spyReportStart({\n            type: ACTION,\n            name: actionName,\n            object: scope,\n            arguments: flattenedArgs\n        })\n    }\n    const prevDerivation_ = globalState.trackingDerivation\n    const runAsAction = !canRunAsDerivation || !prevDerivation_\n    startBatch()\n    let prevAllowStateChanges_ = globalState.allowStateChanges // by default preserve previous allow\n    if (runAsAction) {\n        untrackedStart()\n        prevAllowStateChanges_ = allowStateChangesStart(true)\n    }\n    const prevAllowStateReads_ = allowStateReadsStart(true)\n    const runInfo = {\n        runAsAction_: runAsAction,\n        prevDerivation_,\n        prevAllowStateChanges_,\n        prevAllowStateReads_,\n        notifySpy_,\n        startTime_,\n        actionId_: nextActionId++,\n        parentActionId_: currentActionId\n    }\n    currentActionId = runInfo.actionId_\n    return runInfo\n}\n\nexport function _endAction(runInfo: IActionRunInfo) {\n    if (currentActionId !== runInfo.actionId_) {\n        die(30)\n    }\n    currentActionId = runInfo.parentActionId_\n\n    if (runInfo.error_ !== undefined) {\n        globalState.suppressReactionErrors = true\n    }\n    allowStateChangesEnd(runInfo.prevAllowStateChanges_)\n    allowStateReadsEnd(runInfo.prevAllowStateReads_)\n    endBatch()\n    if (runInfo.runAsAction_) {\n        untrackedEnd(runInfo.prevDerivation_)\n    }\n    if (__DEV__ && runInfo.notifySpy_) {\n        spyReportEnd({ time: Date.now() - runInfo.startTime_ })\n    }\n    globalState.suppressReactionErrors = false\n}\n\nexport function allowStateChanges<T>(allowStateChanges: boolean, func: () => T): T {\n    const prev = allowStateChangesStart(allowStateChanges)\n    try {\n        return func()\n    } finally {\n        allowStateChangesEnd(prev)\n    }\n}\n\nexport function allowStateChangesStart(allowStateChanges: boolean) {\n    const prev = globalState.allowStateChanges\n    globalState.allowStateChanges = allowStateChanges\n    return prev\n}\n\nexport function allowStateChangesEnd(prev: boolean) {\n    globalState.allowStateChanges = prev\n}\n","import {\n    IAtom,\n    IDepTreeNode,\n    IObservable,\n    addObserver,\n    globalState,\n    isComputedValue,\n    removeObserver\n} from \"../internal\"\n\nexport enum IDerivationState_ {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    NOT_TRACKING_ = -1,\n    // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n    UP_TO_DATE_ = 0,\n    // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n    POSSIBLY_STALE_ = 1,\n    // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n    STALE_ = 2\n}\n\nexport enum TraceMode {\n    NONE,\n    LOG,\n    BREAK\n}\n\n/**\n * A derivation is everything that can be derived from the state (all the atoms) in a pure manner.\n * See https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n */\nexport interface IDerivation extends IDepTreeNode {\n    observing_: IObservable[]\n    newObserving_: null | IObservable[]\n    dependenciesState_: IDerivationState_\n    /**\n     * Id of the current run of a derivation. Each time the derivation is tracked\n     * this number is increased by one. This number is globally unique\n     */\n    runId_: number\n    /**\n     * amount of dependencies used by the derivation in this run, which has not been bound yet.\n     */\n    unboundDepsCount_: number\n    onBecomeStale_(): void\n    isTracing_: TraceMode\n\n    /**\n     *  warn if the derivation has no dependencies after creation/update\n     */\n    requiresObservable_?: boolean\n}\n\nexport class CaughtException {\n    constructor(public cause: any) {\n        // Empty\n    }\n}\n\nexport function isCaughtException(e: any): e is CaughtException {\n    return e instanceof CaughtException\n}\n\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn't change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nexport function shouldCompute(derivation: IDerivation): boolean {\n    switch (derivation.dependenciesState_) {\n        case IDerivationState_.UP_TO_DATE_:\n            return false\n        case IDerivationState_.NOT_TRACKING_:\n        case IDerivationState_.STALE_:\n            return true\n        case IDerivationState_.POSSIBLY_STALE_: {\n            // state propagation can occur outside of action/reactive context #2195\n            const prevAllowStateReads = allowStateReadsStart(true)\n            const prevUntracked = untrackedStart() // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n            const obs = derivation.observing_,\n                l = obs.length\n            for (let i = 0; i < l; i++) {\n                const obj = obs[i]\n                if (isComputedValue(obj)) {\n                    if (globalState.disableErrorBoundaries) {\n                        obj.get()\n                    } else {\n                        try {\n                            obj.get()\n                        } catch (e) {\n                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                            untrackedEnd(prevUntracked)\n                            allowStateReadsEnd(prevAllowStateReads)\n                            return true\n                        }\n                    }\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n                    // and `derivation` is an observer of `obj`\n                    // invariantShouldCompute(derivation)\n                    if ((derivation.dependenciesState_ as any) === IDerivationState_.STALE_) {\n                        untrackedEnd(prevUntracked)\n                        allowStateReadsEnd(prevAllowStateReads)\n                        return true\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation)\n            untrackedEnd(prevUntracked)\n            allowStateReadsEnd(prevAllowStateReads)\n            return false\n        }\n    }\n}\n\nexport function isComputingDerivation() {\n    return globalState.trackingDerivation !== null // filter out actions inside computations\n}\n\nexport function checkIfStateModificationsAreAllowed(atom: IAtom) {\n    if (!__DEV__) {\n        return\n    }\n    const hasObservers = atom.observers_.size > 0\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n    if (\n        !globalState.allowStateChanges &&\n        (hasObservers || globalState.enforceActions === \"always\")\n    ) {\n        console.warn(\n            \"[MobX] \" +\n                (globalState.enforceActions\n                    ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \"\n                    : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") +\n                atom.name_\n        )\n    }\n}\n\nexport function checkIfStateReadsAreAllowed(observable: IObservable) {\n    if (__DEV__ && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n        console.warn(\n            `[mobx] Observable '${observable.name_}' being read outside a reactive context.`\n        )\n    }\n}\n\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    // pre allocate array allocation + room for variation in deps\n    // array will be trimmed by bindDependencies\n    changeDependenciesStateTo0(derivation)\n    derivation.newObserving_ = new Array(derivation.observing_.length + 100)\n    derivation.unboundDepsCount_ = 0\n    derivation.runId_ = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    globalState.inBatch++\n    let result\n    if (globalState.disableErrorBoundaries === true) {\n        result = f.call(context)\n    } else {\n        try {\n            result = f.call(context)\n        } catch (e) {\n            result = new CaughtException(e)\n        }\n    }\n    globalState.inBatch--\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n    allowStateReadsEnd(prevAllowStateReads)\n    return result\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation: IDerivation) {\n    if (!__DEV__) {\n        return\n    }\n\n    if (derivation.observing_.length !== 0) {\n        return\n    }\n\n    if (\n        typeof derivation.requiresObservable_ === \"boolean\"\n            ? derivation.requiresObservable_\n            : globalState.reactionRequiresObservable\n    ) {\n        console.warn(\n            `[mobx] Derivation '${derivation.name_}' is created/updated without reading any observable value.`\n        )\n    }\n}\n\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation: IDerivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    const prevObserving = derivation.observing_\n    const observing = (derivation.observing_ = derivation.newObserving_!)\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_\n\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n    let i0 = 0,\n        l = derivation.unboundDepsCount_\n    for (let i = 0; i < l; i++) {\n        const dep = observing[i]\n        if (dep.diffValue_ === 0) {\n            dep.diffValue_ = 1\n            if (i0 !== i) {\n                observing[i0] = dep\n            }\n            i0++\n        }\n\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n        // not hitting the condition\n        if ((dep as any as IDerivation).dependenciesState_ > lowestNewObservingDerivationState) {\n            lowestNewObservingDerivationState = (dep as any as IDerivation).dependenciesState_\n        }\n    }\n    observing.length = i0\n\n    derivation.newObserving_ = null // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n    l = prevObserving.length\n    while (l--) {\n        const dep = prevObserving[l]\n        if (dep.diffValue_ === 0) {\n            removeObserver(dep, derivation)\n        }\n        dep.diffValue_ = 0\n    }\n\n    // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue_ === 1) {\n            dep.diffValue_ = 0\n            addObserver(dep, derivation)\n        }\n    }\n\n    // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n        derivation.dependenciesState_ = lowestNewObservingDerivationState\n        derivation.onBecomeStale_()\n    }\n}\n\nexport function clearObserving(derivation: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    const obs = derivation.observing_\n    derivation.observing_ = []\n    let i = obs.length\n    while (i--) {\n        removeObserver(obs[i], derivation)\n    }\n\n    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_\n}\n\nexport function untracked<T>(action: () => T): T {\n    const prev = untrackedStart()\n    try {\n        return action()\n    } finally {\n        untrackedEnd(prev)\n    }\n}\n\nexport function untrackedStart(): IDerivation | null {\n    const prev = globalState.trackingDerivation\n    globalState.trackingDerivation = null\n    return prev\n}\n\nexport function untrackedEnd(prev: IDerivation | null) {\n    globalState.trackingDerivation = prev\n}\n\nexport function allowStateReadsStart(allowStateReads: boolean) {\n    const prev = globalState.allowStateReads\n    globalState.allowStateReads = allowStateReads\n    return prev\n}\n\nexport function allowStateReadsEnd(prev: boolean) {\n    globalState.allowStateReads = prev\n}\n\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nexport function changeDependenciesStateTo0(derivation: IDerivation) {\n    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_\n\n    const obs = derivation.observing_\n    let i = obs.length\n    while (i--) {\n        obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    }\n}\n","import { IDerivation, IObservable, Reaction, die, getGlobal } from \"../internal\"\nimport { ComputedValue } from \"./computedvalue\"\n\n/**\n * These values will persist if global state is reset\n */\nconst persistentKeys: (keyof MobXGlobals)[] = [\n    \"mobxGuid\",\n    \"spyListeners\",\n    \"enforceActions\",\n    \"computedRequiresReaction\",\n    \"reactionRequiresObservable\",\n    \"observableRequiresReaction\",\n    \"allowStateReads\",\n    \"disableErrorBoundaries\",\n    \"runId\",\n    \"UNCHANGED\",\n    \"useProxies\"\n]\n\nexport type IUNCHANGED = {}\n\nexport class MobXGlobals {\n    /**\n     * MobXGlobals version.\n     * MobX compatiblity with other versions loaded in memory as long as this version matches.\n     * It indicates that the global state still stores similar information\n     *\n     * N.B: this version is unrelated to the package version of MobX, and is only the version of the\n     * internal state storage of MobX, and can be the same across many different package versions\n     */\n    version = 6\n\n    /**\n     * globally unique token to signal unchanged\n     */\n    UNCHANGED: IUNCHANGED = {}\n\n    /**\n     * Currently running derivation\n     */\n    trackingDerivation: IDerivation | null = null\n\n    /**\n     * Currently running reaction. This determines if we currently have a reactive context.\n     * (Tracking derivation is also set for temporal tracking of computed values inside actions,\n     * but trackingReaction can only be set by a form of Reaction)\n     */\n    trackingContext: Reaction | ComputedValue<any> | null = null\n\n    /**\n     * Each time a derivation is tracked, it is assigned a unique run-id\n     */\n    runId = 0\n\n    /**\n     * 'guid' for general purpose. Will be persisted amongst resets.\n     */\n    mobxGuid = 0\n\n    /**\n     * Are we in a batch block? (and how many of them)\n     */\n    inBatch: number = 0\n\n    /**\n     * ID of the latest batch. Used to suppress reportChanged of newly created atoms.\n     * Note the value persists even after batch ended.\n     */\n    batchId: number = Number.MIN_SAFE_INTEGER\n\n    /**\n     * Observables that don't have observers anymore, and are about to be\n     * suspended, unless somebody else accesses it in the same batch\n     *\n     * @type {IObservable[]}\n     */\n    pendingUnobservations: IObservable[] = []\n\n    /**\n     * List of scheduled, not yet executed, reactions.\n     */\n    pendingReactions: Reaction[] = []\n\n    /**\n     * Are we currently processing reactions?\n     */\n    isRunningReactions = false\n\n    /**\n     * Is it allowed to change observables at this point?\n     * In general, MobX doesn't allow that when running computations and React.render.\n     * To ensure that those functions stay pure.\n     */\n    allowStateChanges = false\n\n    /**\n     * Is it allowed to read observables at this point?\n     * Used to hold the state needed for `observableRequiresReaction`\n     */\n    allowStateReads = true\n\n    /**\n     * If strict mode is enabled, state changes are by default not allowed\n     */\n    enforceActions: boolean | \"always\" = true\n\n    /**\n     * Spy callbacks\n     */\n    spyListeners: { (change: any): void }[] = []\n\n    /**\n     * Globally attached error handlers that react specifically to errors in reactions\n     */\n    globalReactionErrorHandlers: ((error: any, derivation: IDerivation) => void)[] = []\n\n    /**\n     * Warn if computed values are accessed outside a reactive context\n     */\n    computedRequiresReaction = false\n\n    /**\n     * (Experimental)\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable = false\n\n    /**\n     * (Experimental)\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction = false\n\n    /*\n     * Don't catch and rethrow exceptions. This is useful for inspecting the state of\n     * the stack when an exception occurs while debugging.\n     */\n    disableErrorBoundaries = false\n\n    /*\n     * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as\n     * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836\n     */\n    suppressReactionErrors = false\n\n    useProxies = true\n    /*\n     * print warnings about code that would fail if proxies weren't available\n     */\n    verifyProxies = false\n\n    /**\n     * False forces all object's descriptors to\n     * writable: true\n     * configurable: true\n     */\n    safeDescriptors = true\n\n    /**\n     * Changes with each state update, used by useSyncExternalStore\n     */\n    stateVersion = Number.MIN_SAFE_INTEGER\n}\n\nlet canMergeGlobalState = true\nlet isolateCalled = false\n\nexport let globalState: MobXGlobals = (function () {\n    let global = getGlobal()\n    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n        canMergeGlobalState = false\n    }\n    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n        canMergeGlobalState = false\n    }\n\n    if (!canMergeGlobalState) {\n        // Because this is a IIFE we need to let isolateCalled a chance to change\n        // so we run it after the event loop completed at least 1 iteration\n        setTimeout(() => {\n            if (!isolateCalled) {\n                die(35)\n            }\n        }, 1)\n        return new MobXGlobals()\n    } else if (global.__mobxGlobals) {\n        global.__mobxInstanceCount += 1\n        if (!global.__mobxGlobals.UNCHANGED) {\n            global.__mobxGlobals.UNCHANGED = {}\n        } // make merge backward compatible\n        return global.__mobxGlobals\n    } else {\n        global.__mobxInstanceCount = 1\n        return (global.__mobxGlobals = new MobXGlobals())\n    }\n})()\n\nexport function isolateGlobalState() {\n    if (\n        globalState.pendingReactions.length ||\n        globalState.inBatch ||\n        globalState.isRunningReactions\n    ) {\n        die(36)\n    }\n    isolateCalled = true\n    if (canMergeGlobalState) {\n        let global = getGlobal()\n        if (--global.__mobxInstanceCount === 0) {\n            global.__mobxGlobals = undefined\n        }\n        globalState = new MobXGlobals()\n    }\n}\n\nexport function getGlobalState(): any {\n    return globalState\n}\n\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nexport function resetGlobalState() {\n    const defaultGlobals = new MobXGlobals()\n    for (let key in defaultGlobals) {\n        if (persistentKeys.indexOf(key as any) === -1) {\n            globalState[key] = defaultGlobals[key]\n        }\n    }\n    globalState.allowStateChanges = !globalState.enforceActions\n}\n","import {\n    Lambda,\n    ComputedValue,\n    IDependencyTree,\n    IDerivation,\n    IDerivationState_,\n    TraceMode,\n    getDependencyTree,\n    globalState,\n    runReactions,\n    checkIfStateReadsAreAllowed\n} from \"../internal\"\n\nexport interface IDepTreeNode {\n    name_: string\n    observing_?: IObservable[]\n}\n\nexport interface IObservable extends IDepTreeNode {\n    diffValue_: number\n    /**\n     * Id of the derivation *run* that last accessed this observable.\n     * If this id equals the *run* id of the current derivation,\n     * the dependency is already established\n     */\n    lastAccessedBy_: number\n    isBeingObserved_: boolean\n\n    lowestObserverState_: IDerivationState_ // Used to avoid redundant propagations\n    isPendingUnobservation_: boolean // Used to push itself to global.pendingUnobservations at most once per batch.\n\n    observers_: Set<IDerivation>\n\n    onBUO(): void\n    onBO(): void\n\n    onBUOL: Set<Lambda> | undefined\n    onBOL: Set<Lambda> | undefined\n}\n\nexport function hasObservers(observable: IObservable): boolean {\n    return observable.observers_ && observable.observers_.size > 0\n}\n\nexport function getObservers(observable: IObservable): Set<IDerivation> {\n    return observable.observers_\n}\n\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\nexport function addObserver(observable: IObservable, node: IDerivation) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n\n    observable.observers_.add(node)\n    if (observable.lowestObserverState_ > node.dependenciesState_) {\n        observable.lowestObserverState_ = node.dependenciesState_\n    }\n\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\n\nexport function removeObserver(observable: IObservable, node: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    observable.observers_.delete(node)\n    if (observable.observers_.size === 0) {\n        // deleting last observer\n        queueForUnobservation(observable)\n    }\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\n\nexport function queueForUnobservation(observable: IObservable) {\n    if (observable.isPendingUnobservation_ === false) {\n        // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n        observable.isPendingUnobservation_ = true\n        globalState.pendingUnobservations.push(observable)\n    }\n}\n\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nexport function startBatch() {\n    if (globalState.inBatch === 0) {\n        globalState.batchId =\n            globalState.batchId < Number.MAX_SAFE_INTEGER\n                ? globalState.batchId + 1\n                : Number.MIN_SAFE_INTEGER\n    }\n    globalState.inBatch++\n}\n\nexport function endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions()\n        // the batch is actually about to finish, all unobserving should happen here.\n        const list = globalState.pendingUnobservations\n        for (let i = 0; i < list.length; i++) {\n            const observable = list[i]\n            observable.isPendingUnobservation_ = false\n            if (observable.observers_.size === 0) {\n                if (observable.isBeingObserved_) {\n                    // if this observable had reactive observers, trigger the hooks\n                    observable.isBeingObserved_ = false\n                    observable.onBUO()\n                }\n                if (observable instanceof ComputedValue) {\n                    // computed values are automatically teared down when the last observer leaves\n                    // this process happens recursively, this computed might be the last observabe of another, etc..\n                    observable.suspend_()\n                }\n            }\n        }\n        globalState.pendingUnobservations = []\n    }\n}\n\nexport function reportObserved(observable: IObservable): boolean {\n    checkIfStateReadsAreAllowed(observable)\n\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n        /**\n         * Simple optimization, give each derivation run an unique id (runId)\n         * Check if last time this observable was accessed the same runId is used\n         * if this is the case, the relation is already known\n         */\n        if (derivation.runId_ !== observable.lastAccessedBy_) {\n            observable.lastAccessedBy_ = derivation.runId_\n            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n            derivation.newObserving_![derivation.unboundDepsCount_++] = observable\n            if (!observable.isBeingObserved_ && globalState.trackingContext) {\n                observable.isBeingObserved_ = true\n                observable.onBO()\n            }\n        }\n        return observable.isBeingObserved_\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren't a feature people should depend on\n * Also most basic use cases should be ok\n */\n\n// Called by Atom when its value changes\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale_()\n        }\n        d.dependenciesState_ = IDerivationState_.STALE_\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n\n// Called by ComputedValue when it recalculate and its value changed\nexport function propagateChangeConfirmed(observable: IObservable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n            d.dependenciesState_ = IDerivationState_.STALE_\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n        } else if (\n            d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n        ) {\n            observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n        }\n    })\n    // invariantLOS(observable, \"confirmed end\");\n}\n\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nexport function propagateMaybeChanged(observable: IObservable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_\n            d.onBecomeStale_()\n        }\n    })\n    // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation: IDerivation, observable: IObservable) {\n    console.log(\n        `[mobx.trace] '${derivation.name_}' is invalidated due to a change in: '${observable.name_}'`\n    )\n    if (derivation.isTracing_ === TraceMode.BREAK) {\n        const lines = []\n        printDepTree(getDependencyTree(derivation), lines, 1)\n\n        // prettier-ignore\n        new Function(\n`debugger;\n/*\nTracing '${derivation.name_}'\n\nYou are entering this break point because derivation '${derivation.name_}' is being traced and '${observable.name_}' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n${derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\"}\n\nThe dependencies for this derivation are:\n\n${lines.join(\"\\n\")}\n*/\n    `)()\n    }\n}\n\nfunction printDepTree(tree: IDependencyTree, lines: string[], depth: number) {\n    if (lines.length >= 1000) {\n        lines.push(\"(and many more)\")\n        return\n    }\n    lines.push(`${\"\\t\".repeat(depth - 1)}${tree.name}`)\n    if (tree.dependencies) {\n        tree.dependencies.forEach(child => printDepTree(child, lines, depth + 1))\n    }\n}\n","import {\n    $mobx,\n    IDerivation,\n    IDerivationState_,\n    IObservable,\n    Lambda,\n    TraceMode,\n    clearObserving,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    shouldCompute,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    trace,\n    trackDerivedFunction, GenericAbortSignal\n} from \"../internal\"\n\n/**\n * Reactions are a special kind of derivations. Several things distinguishes them from normal reactive computations\n *\n * 1) They will always run, whether they are used by other computations or not.\n * This means that they are very suitable for triggering side effects like logging, updating the DOM and making network requests.\n * 2) They are not observable themselves\n * 3) They will always run after any 'normal' derivations\n * 4) They are allowed to change the state and thereby triggering themselves again, as long as they make sure the state propagates to a stable state in a reasonable amount of iterations.\n *\n * The state machine of a Reaction is as follows:\n *\n * 1) after creating, the reaction should be started by calling `runReaction` or by scheduling it (see also `autorun`)\n * 2) the `onInvalidate` handler should somehow result in a call to `this.track(someFunction)`\n * 3) all observables accessed in `someFunction` will be observed by this reaction.\n * 4) as soon as some of the dependencies has changed the Reaction will be rescheduled for another run (after the current mutation or transaction). `isScheduled` will yield true once a dependency is stale and during this period\n * 5) `onInvalidate` will be called, and we are back at step 1.\n *\n */\n\nexport interface IReactionPublic {\n    dispose(): void\n    trace(enterBreakPoint?: boolean): void\n}\n\nexport interface IReactionDisposer {\n    (): void\n    $mobx: Reaction\n}\n\nexport class Reaction implements IDerivation, IReactionPublic {\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_: IObservable[] = []\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    diffValue_ = 0\n    runId_ = 0\n    unboundDepsCount_ = 0\n    isDisposed_ = false\n    isScheduled_ = false\n    isTrackPending_ = false\n    isRunning_ = false\n    isTracing_: TraceMode = TraceMode.NONE\n\n    constructor(\n        public name_: string = __DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\",\n        private onInvalidate_: () => void,\n        private errorHandler_?: (error: any, derivation: IDerivation) => void,\n        public requiresObservable_?\n    ) {}\n\n    onBecomeStale_() {\n        this.schedule_()\n    }\n\n    schedule_() {\n        if (!this.isScheduled_) {\n            this.isScheduled_ = true\n            globalState.pendingReactions.push(this)\n            runReactions()\n        }\n    }\n\n    isScheduled() {\n        return this.isScheduled_\n    }\n\n    /**\n     * internal, use schedule() if you intend to kick off a reaction\n     */\n    runReaction_() {\n        if (!this.isDisposed_) {\n            startBatch()\n            this.isScheduled_ = false\n            const prev = globalState.trackingContext\n            globalState.trackingContext = this\n            if (shouldCompute(this)) {\n                this.isTrackPending_ = true\n\n                try {\n                    this.onInvalidate_()\n                    if (__DEV__ && this.isTrackPending_ && isSpyEnabled()) {\n                        // onInvalidate didn't trigger track right away..\n                        spyReport({\n                            name: this.name_,\n                            type: \"scheduled-reaction\"\n                        })\n                    }\n                } catch (e) {\n                    this.reportExceptionInDerivation_(e)\n                }\n            }\n            globalState.trackingContext = prev\n            endBatch()\n        }\n    }\n\n    track(fn: () => void) {\n        if (this.isDisposed_) {\n            return\n            // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n        }\n        startBatch()\n        const notify = isSpyEnabled()\n        let startTime\n        if (__DEV__ && notify) {\n            startTime = Date.now()\n            spyReportStart({\n                name: this.name_,\n                type: \"reaction\"\n            })\n        }\n        this.isRunning_ = true\n        const prevReaction = globalState.trackingContext // reactions could create reactions...\n        globalState.trackingContext = this\n        const result = trackDerivedFunction(this, fn, undefined)\n        globalState.trackingContext = prevReaction\n        this.isRunning_ = false\n        this.isTrackPending_ = false\n        if (this.isDisposed_) {\n            // disposed during last run. Clean up everything that was bound after the dispose call.\n            clearObserving(this)\n        }\n        if (isCaughtException(result)) {\n            this.reportExceptionInDerivation_(result.cause)\n        }\n        if (__DEV__ && notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            })\n        }\n        endBatch()\n    }\n\n    reportExceptionInDerivation_(error: any) {\n        if (this.errorHandler_) {\n            this.errorHandler_(error, this)\n            return\n        }\n\n        if (globalState.disableErrorBoundaries) {\n            throw error\n        }\n\n        const message = __DEV__\n            ? `[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '${this}'`\n            : `[mobx] uncaught error in '${this}'`\n        if (!globalState.suppressReactionErrors) {\n            console.error(message, error)\n            /** If debugging brought you here, please, read the above message :-). Tnx! */\n        } else if (__DEV__) { console.warn(`[mobx] (error in reaction '${this.name_}' suppressed, fix error of causing action below)`) } // prettier-ignore\n\n        if (__DEV__ && isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                name: this.name_,\n                message,\n                error: \"\" + error\n            })\n        }\n\n        globalState.globalReactionErrorHandlers.forEach(f => f(error, this))\n    }\n\n    dispose() {\n        if (!this.isDisposed_) {\n            this.isDisposed_ = true\n            if (!this.isRunning_) {\n                // if disposed while running, clean up later. Maybe not optimal, but rare case\n                startBatch()\n                clearObserving(this)\n                endBatch()\n            }\n        }\n    }\n\n    getDisposer_(abortSignal?: GenericAbortSignal): IReactionDisposer {\n        const dispose = (() => {\n            this.dispose()\n            abortSignal?.removeEventListener?.(\"abort\", dispose)\n        }) as IReactionDisposer\n        abortSignal?.addEventListener?.(\"abort\", dispose)\n        dispose[$mobx] = this\n\n        return dispose\n    }\n\n    toString() {\n        return `Reaction[${this.name_}]`\n    }\n\n    trace(enterBreakPoint: boolean = false) {\n        trace(this, enterBreakPoint)\n    }\n}\n\nexport function onReactionError(handler: (error: any, derivation: IDerivation) => void): Lambda {\n    globalState.globalReactionErrorHandlers.push(handler)\n    return () => {\n        const idx = globalState.globalReactionErrorHandlers.indexOf(handler)\n        if (idx >= 0) {\n            globalState.globalReactionErrorHandlers.splice(idx, 1)\n        }\n    }\n}\n\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nconst MAX_REACTION_ITERATIONS = 100\n\nlet reactionScheduler: (fn: () => void) => void = f => f()\n\nexport function runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n        return\n    }\n    reactionScheduler(runReactionsHelper)\n}\n\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true\n    const allReactions = globalState.pendingReactions\n    let iterations = 0\n\n    // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\n                __DEV__\n                    ? `Reaction doesn't converge to a stable state after ${MAX_REACTION_ITERATIONS} iterations.` +\n                          ` Probably there is a cycle in the reactive function: ${allReactions[0]}`\n                    : `[mobx] cycle in reaction: ${allReactions[0]}`\n            )\n            allReactions.splice(0) // clear reactions\n        }\n        let remainingReactions = allReactions.splice(0)\n        for (let i = 0, l = remainingReactions.length; i < l; i++) {\n            remainingReactions[i].runReaction_()\n        }\n    }\n    globalState.isRunningReactions = false\n}\n\nexport const isReaction = createInstanceofPredicate(\"Reaction\", Reaction)\n\nexport function setReactionScheduler(fn: (f: () => void) => void) {\n    const baseScheduler = reactionScheduler\n    reactionScheduler = f => fn(() => baseScheduler(f))\n}\n","import { IComputedDidChange } from \"./computedvalue\"\nimport { IValueDidChange, IBoxDidChange } from \"./../types/observablevalue\"\nimport { IObjectDidChange } from \"./../types/observableobject\"\nimport { IArrayDidChange } from \"./../types/observablearray\"\nimport { Lambda, globalState, once, ISetDidChange, IMapDidChange } from \"../internal\"\n\nexport function isSpyEnabled() {\n    return __DEV__ && !!globalState.spyListeners.length\n}\n\nexport type PureSpyEvent =\n    | { type: \"action\"; name: string; object: unknown; arguments: unknown[] }\n    | { type: \"scheduled-reaction\"; name: string }\n    | { type: \"reaction\"; name: string }\n    | { type: \"error\"; name: string; message: string; error: string }\n    | IComputedDidChange<unknown>\n    | IObjectDidChange<unknown>\n    | IArrayDidChange<unknown>\n    | IMapDidChange<unknown, unknown>\n    | ISetDidChange<unknown>\n    | IValueDidChange<unknown>\n    | IBoxDidChange<unknown>\n    | { type: \"report-end\"; spyReportEnd: true; time?: number }\n\ntype SpyEvent = PureSpyEvent & { spyReportStart?: true }\n\nexport function spyReport(event: SpyEvent) {\n    if (!__DEV__) {\n        return\n    } // dead code elimination can do the rest\n    if (!globalState.spyListeners.length) {\n        return\n    }\n    const listeners = globalState.spyListeners\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](event)\n    }\n}\n\nexport function spyReportStart(event: PureSpyEvent) {\n    if (!__DEV__) {\n        return\n    }\n    const change = { ...event, spyReportStart: true as const }\n    spyReport(change)\n}\n\nconst END_EVENT: SpyEvent = { type: \"report-end\", spyReportEnd: true }\n\nexport function spyReportEnd(change?: { time?: number }) {\n    if (!__DEV__) {\n        return\n    }\n    if (change) {\n        spyReport({ ...change, type: \"report-end\", spyReportEnd: true })\n    } else {\n        spyReport(END_EVENT)\n    }\n}\n\nexport function spy(listener: (change: SpyEvent) => void): Lambda {\n    if (!__DEV__) {\n        console.warn(`[mobx.spy] Is a no-op in production builds`)\n        return function () {}\n    } else {\n        globalState.spyListeners.push(listener)\n        return once(() => {\n            globalState.spyListeners = globalState.spyListeners.filter(l => l !== listener)\n        })\n    }\n}\n","import {\n    createAction,\n    executeAction,\n    Annotation,\n    storeAnnotation,\n    die,\n    isFunction,\n    isStringish,\n    createDecoratorAnnotation,\n    createActionAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassFieldDecorator, ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const ACTION = \"action\"\nexport const ACTION_BOUND = \"action.bound\"\nexport const AUTOACTION = \"autoAction\"\nexport const AUTOACTION_BOUND = \"autoAction.bound\"\n\nconst DEFAULT_ACTION_NAME = \"<unnamed action>\"\n\nconst actionAnnotation = createActionAnnotation(ACTION)\nconst actionBoundAnnotation = createActionAnnotation(ACTION_BOUND, {\n    bound: true\n})\nconst autoActionAnnotation = createActionAnnotation(AUTOACTION, {\n    autoAction: true\n})\nconst autoActionBoundAnnotation = createActionAnnotation(AUTOACTION_BOUND, {\n    autoAction: true,\n    bound: true\n})\n\nexport interface IActionFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassMethodDecorator,\n        ClassFieldDecorator {\n    // nameless actions\n    <T extends Function | undefined | null>(fn: T): T\n    // named actions\n    <T extends Function | undefined | null>(name: string, fn: T): T\n\n    // named decorator\n    (customName: string): PropertyDecorator &\n        Annotation &\n        ClassMethodDecorator &\n        ClassFieldDecorator\n\n    // decorator (name no longer supported)\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator & ClassFieldDecorator\n}\n\nfunction createActionFactory(autoAction: boolean): IActionFactory {\n    const res: IActionFactory = function action(arg1, arg2?): any {\n        // action(fn() {})\n        if (isFunction(arg1)) {\n            return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction)\n        }\n        // action(\"name\", fn() {})\n        if (isFunction(arg2)) {\n            return createAction(arg1, arg2, autoAction)\n        }\n        // @action (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(\n                arg1,\n                arg2\n            )\n        }\n        // @action\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation)\n        }\n        // action(\"name\") & @action(\"name\")\n        if (isStringish(arg1)) {\n            return createDecoratorAnnotation(\n                createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n                    name: arg1,\n                    autoAction\n                })\n            )\n        }\n\n        if (__DEV__) {\n            die(\"Invalid arguments for `action`\")\n        }\n    } as IActionFactory\n    return res\n}\n\nexport const action: IActionFactory = createActionFactory(false)\nObject.assign(action, actionAnnotation)\nexport const autoAction: IActionFactory = createActionFactory(true)\nObject.assign(autoAction, autoActionAnnotation)\n\naction.bound = createDecoratorAnnotation(actionBoundAnnotation)\nautoAction.bound = createDecoratorAnnotation(autoActionBoundAnnotation)\n\nexport function runInAction<T>(fn: () => T): T {\n    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined)\n}\n\nexport function isAction(thing: any) {\n    return isFunction(thing) && thing.isMobxAction === true\n}\n","import {\n    EMPTY_OBJECT,\n    IEqualsComparer,\n    IReactionDisposer,\n    IReactionPublic,\n    Lambda,\n    Reaction,\n    action,\n    comparer,\n    getNextId,\n    isAction,\n    isFunction,\n    isPlainObject,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IAutorunOptions {\n    delay?: number\n    name?: string\n    /**\n     * Experimental.\n     * Warns if the view doesn't track observables\n     */\n    requiresObservable?: boolean\n    scheduler?: (callback: () => void) => any\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(view)) {\n            die(\"Autorun expects a function as first argument\")\n        }\n        if (isAction(view)) {\n            die(\"Autorun does not accept actions since actions are untrackable\")\n        }\n    }\n\n    const name: string =\n        opts?.name ?? (__DEV__ ? (view as any).name || \"Autorun@\" + getNextId() : \"Autorun\")\n    const runSync = !opts.scheduler && !opts.delay\n    let reaction: Reaction\n\n    if (runSync) {\n        // normal autorun\n        reaction = new Reaction(\n            name,\n            function (this: Reaction) {\n                this.track(reactionRunner)\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    } else {\n        const scheduler = createSchedulerFromOptions(opts)\n        // debounced autorun\n        let isScheduled = false\n\n        reaction = new Reaction(\n            name,\n            () => {\n                if (!isScheduled) {\n                    isScheduled = true\n                    scheduler(() => {\n                        isScheduled = false\n                        if (!reaction.isDisposed_) {\n                            reaction.track(reactionRunner)\n                        }\n                    })\n                }\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    }\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    if(!opts?.signal?.aborted) {\n        reaction.schedule_()\n    }\n    return reaction.getDisposer_(opts?.signal)\n}\n\nexport type IReactionOptions<T, FireImmediately extends boolean> = IAutorunOptions & {\n    fireImmediately?: FireImmediately\n    equals?: IEqualsComparer<T>\n}\n\nconst run = (f: Lambda) => f()\n\nfunction createSchedulerFromOptions(opts: IAutorunOptions) {\n    return opts.scheduler\n        ? opts.scheduler\n        : opts.delay\n        ? (f: Lambda) => setTimeout(f, opts.delay!)\n        : run\n}\n\nexport function reaction<T, FireImmediately extends boolean = false>(\n    expression: (r: IReactionPublic) => T,\n    effect: (\n        arg: T,\n        prev: FireImmediately extends true ? T | undefined : T,\n        r: IReactionPublic\n    ) => void,\n    opts: IReactionOptions<T, FireImmediately> = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(expression) || !isFunction(effect)) {\n            die(\"First and second argument to reaction should be functions\")\n        }\n        if (!isPlainObject(opts)) {\n            die(\"Third argument of reactions should be an object\")\n        }\n    }\n    const name = opts.name ?? (__DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\")\n    const effectAction = action(\n        name,\n        opts.onError ? wrapErrorHandler(opts.onError, effect) : effect\n    )\n    const runSync = !opts.scheduler && !opts.delay\n    const scheduler = createSchedulerFromOptions(opts)\n\n    let firstTime = true\n    let isScheduled = false\n    let value: T\n    let oldValue: T | undefined\n\n    const equals: IEqualsComparer<T> = (opts as any).compareStructural\n        ? comparer.structural\n        : opts.equals || comparer.default\n\n    const r = new Reaction(\n        name,\n        () => {\n            if (firstTime || runSync) {\n                reactionRunner()\n            } else if (!isScheduled) {\n                isScheduled = true\n                scheduler!(reactionRunner)\n            }\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n\n    function reactionRunner() {\n        isScheduled = false\n        if (r.isDisposed_) {\n            return\n        }\n        let changed: boolean = false\n        r.track(() => {\n            const nextValue = allowStateChanges(false, () => expression(r))\n            changed = firstTime || !equals(value, nextValue)\n            oldValue = value\n            value = nextValue\n        })\n\n        // This casting is nesessary as TS cannot infer proper type in current funciton implementation\n        type OldValue = FireImmediately extends true ? T | undefined : T\n        if (firstTime && opts.fireImmediately!) {\n            effectAction(value, oldValue as OldValue, r)\n        } else if (!firstTime && changed) {\n            effectAction(value, oldValue as OldValue, r)\n        }\n        firstTime = false\n    }\n\n    if(!opts?.signal?.aborted) {\n        r.schedule_()\n    }\n    return r.getDisposer_(opts?.signal)\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n    return function () {\n        try {\n            return baseFn.apply(this, arguments)\n        } catch (e) {\n            errorHandler.call(this, e)\n        }\n    }\n}\n","import {\n    IComputedValue,\n    IObservable,\n    IObservableArray,\n    Lambda,\n    ObservableMap,\n    getAtom,\n    ObservableSet,\n    isFunction,\n    IObservableValue\n} from \"../internal\"\n\nconst ON_BECOME_OBSERVED = \"onBO\"\nconst ON_BECOME_UNOBSERVED = \"onBUO\"\n\nexport function onBecomeObserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3)\n}\n\nexport function onBecomeUnobserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3)\n}\n\nfunction interceptHook(hook: \"onBO\" | \"onBUO\", thing, arg2, arg3) {\n    const atom: IObservable =\n        typeof arg3 === \"function\" ? getAtom(thing, arg2) : (getAtom(thing) as any)\n    const cb = isFunction(arg3) ? arg3 : arg2\n    const listenersKey = `${hook}L` as \"onBOL\" | \"onBUOL\"\n\n    if (atom[listenersKey]) {\n        atom[listenersKey]!.add(cb)\n    } else {\n        atom[listenersKey] = new Set<Lambda>([cb])\n    }\n\n    return function () {\n        const hookListeners = atom[listenersKey]\n        if (hookListeners) {\n            hookListeners.delete(cb)\n            if (hookListeners.size === 0) {\n                delete atom[listenersKey]\n            }\n        }\n    }\n}\n","import { globalState, isolateGlobalState, setReactionScheduler } from \"../internal\"\n\nconst NEVER = \"never\"\nconst ALWAYS = \"always\"\nconst OBSERVED = \"observed\"\n// const IF_AVAILABLE = \"ifavailable\"\n\nexport function configure(options: {\n    enforceActions?: \"never\" | \"always\" | \"observed\"\n    computedRequiresReaction?: boolean\n    /**\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable?: boolean\n    /**\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction?: boolean\n    isolateGlobalState?: boolean\n    disableErrorBoundaries?: boolean\n    safeDescriptors?: boolean\n    reactionScheduler?: (f: () => void) => void\n    useProxies?: \"always\" | \"never\" | \"ifavailable\"\n}): void {\n    if (options.isolateGlobalState === true) {\n        isolateGlobalState()\n    }\n    const { useProxies, enforceActions } = options\n    if (useProxies !== undefined) {\n        globalState.useProxies =\n            useProxies === ALWAYS\n                ? true\n                : useProxies === NEVER\n                ? false\n                : typeof Proxy !== \"undefined\"\n    }\n    if (useProxies === \"ifavailable\") {\n        globalState.verifyProxies = true\n    }\n    if (enforceActions !== undefined) {\n        const ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED\n        globalState.enforceActions = ea\n        globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true\n    }\n    ;[\n        \"computedRequiresReaction\",\n        \"reactionRequiresObservable\",\n        \"observableRequiresReaction\",\n        \"disableErrorBoundaries\",\n        \"safeDescriptors\"\n    ].forEach(key => {\n        if (key in options) {\n            globalState[key] = !!options[key]\n        }\n    })\n    globalState.allowStateReads = !globalState.observableRequiresReaction\n    if (__DEV__ && globalState.disableErrorBoundaries === true) {\n        console.warn(\n            \"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\"\n        )\n    }\n    if (options.reactionScheduler) {\n        setReactionScheduler(options.reactionScheduler)\n    }\n}\n","import {\n    CreateObservableOptions,\n    isObservableMap,\n    AnnotationsMap,\n    asObservableObject,\n    isPlainObject,\n    ObservableObjectAdministration,\n    isObservable,\n    die,\n    getOwnPropertyDescriptors,\n    $mobx,\n    ownKeys,\n    initObservable\n} from \"../internal\"\n\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties: B,\n    annotations?: AnnotationsMap<B, never>,\n    options?: CreateObservableOptions\n): A & B {\n    if (__DEV__) {\n        if (arguments.length > 4) {\n            die(\"'extendObservable' expected 2-4 arguments\")\n        }\n        if (typeof target !== \"object\") {\n            die(\"'extendObservable' expects an object as first argument\")\n        }\n        if (isObservableMap(target)) {\n            die(\"'extendObservable' should not be used on maps, use map.merge instead\")\n        }\n        if (!isPlainObject(properties)) {\n            die(`'extendObservable' only accepts plain objects as second argument`)\n        }\n        if (isObservable(properties) || isObservable(annotations)) {\n            die(`Extending an object with another observable (object) is not supported`)\n        }\n    }\n    // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n    const descriptors = getOwnPropertyDescriptors(properties)\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        ownKeys(descriptors).forEach(key => {\n            adm.extend_(\n                key,\n                descriptors[key as any],\n                // must pass \"undefined\" for { key: undefined }\n                !annotations ? true : key in annotations ? annotations[key] : true\n            )\n        })\n    })\n\n    return target as any\n}\n","import { IDepTreeNode, getAtom, getObservers, hasObservers } from \"../internal\"\n\nexport interface IDependencyTree {\n    name: string\n    dependencies?: IDependencyTree[]\n}\n\nexport interface IObserverTree {\n    name: string\n    observers?: IObserverTree[]\n}\n\nexport function getDependencyTree(thing: any, property?: string): IDependencyTree {\n    return nodeToDependencyTree(getAtom(thing, property))\n}\n\nfunction nodeToDependencyTree(node: IDepTreeNode): IDependencyTree {\n    const result: IDependencyTree = {\n        name: node.name_\n    }\n    if (node.observing_ && node.observing_.length > 0) {\n        result.dependencies = unique(node.observing_).map(nodeToDependencyTree)\n    }\n    return result\n}\n\nexport function getObserverTree(thing: any, property?: string): IObserverTree {\n    return nodeToObserverTree(getAtom(thing, property))\n}\n\nfunction nodeToObserverTree(node: IDepTreeNode): IObserverTree {\n    const result: IObserverTree = {\n        name: node.name_\n    }\n    if (hasObservers(node as any)) {\n        result.observers = Array.from(<any>getObservers(node as any)).map(<any>nodeToObserverTree)\n    }\n    return result\n}\n\nfunction unique<T>(list: T[]): T[] {\n    return Array.from(new Set(list))\n}\n","import {\n    action,\n    noop,\n    die,\n    isFunction,\n    Annotation,\n    isStringish,\n    storeAnnotation,\n    createFlowAnnotation,\n    createDecoratorAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const FLOW = \"flow\"\n\nlet generatorId = 0\n\nexport function FlowCancellationError() {\n    this.message = \"FLOW_CANCELLED\"\n}\nFlowCancellationError.prototype = Object.create(Error.prototype)\n\nexport function isFlowCancellationError(error: Error) {\n    return error instanceof FlowCancellationError\n}\n\nexport type CancellablePromise<T> = Promise<T> & { cancel(): void }\n\ninterface Flow extends Annotation, PropertyDecorator, ClassMethodDecorator {\n    <R, Args extends any[]>(\n        generator: (...args: Args) => Generator<any, R, any> | AsyncGenerator<any, R, any>\n    ): (...args: Args) => CancellablePromise<R>\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator\n}\n\nconst flowAnnotation = createFlowAnnotation(\"flow\")\nconst flowBoundAnnotation = createFlowAnnotation(\"flow.bound\", { bound: true })\n\nexport const flow: Flow = Object.assign(\n    function flow(arg1, arg2?) {\n        // @flow (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return flowAnnotation.decorate_20223_(arg1, arg2)\n        }\n        // @flow\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, flowAnnotation)\n        }\n        // flow(fn)\n        if (__DEV__ && arguments.length !== 1) {\n            die(`Flow expects single argument with generator function`)\n        }\n        const generator = arg1\n        const name = generator.name || \"<unnamed flow>\"\n\n        // Implementation based on https://github.com/tj/co/blob/master/index.js\n        const res = function () {\n            const ctx = this\n            const args = arguments\n            const runId = ++generatorId\n            const gen = action(`${name} - runid: ${runId} - init`, generator).apply(ctx, args)\n            let rejector: (error: any) => void\n            let pendingPromise: CancellablePromise<any> | undefined = undefined\n\n            const promise = new Promise(function (resolve, reject) {\n                let stepId = 0\n                rejector = reject\n\n                function onFulfilled(res: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.next\n                        ).call(gen, res)\n                    } catch (e) {\n                        return reject(e)\n                    }\n\n                    next(ret)\n                }\n\n                function onRejected(err: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.throw!\n                        ).call(gen, err)\n                    } catch (e) {\n                        return reject(e)\n                    }\n                    next(ret)\n                }\n\n                function next(ret: any) {\n                    if (isFunction(ret?.then)) {\n                        // an async iterator\n                        ret.then(next, reject)\n                        return\n                    }\n                    if (ret.done) {\n                        return resolve(ret.value)\n                    }\n                    pendingPromise = Promise.resolve(ret.value) as any\n                    return pendingPromise!.then(onFulfilled, onRejected)\n                }\n\n                onFulfilled(undefined) // kick off the process\n            }) as any\n\n            promise.cancel = action(`${name} - runid: ${runId} - cancel`, function () {\n                try {\n                    if (pendingPromise) {\n                        cancelPromise(pendingPromise)\n                    }\n                    // Finally block can return (or yield) stuff..\n                    const res = gen.return!(undefined as any)\n                    // eat anything that promise would do, it's cancelled!\n                    const yieldedPromise = Promise.resolve(res.value)\n                    yieldedPromise.then(noop, noop)\n                    cancelPromise(yieldedPromise) // maybe it can be cancelled :)\n                    // reject our original promise\n                    rejector(new FlowCancellationError())\n                } catch (e) {\n                    rejector(e) // there could be a throwing finally block\n                }\n            })\n            return promise\n        }\n        res.isMobXFlow = true\n        return res\n    } as any,\n    flowAnnotation\n)\n\nflow.bound = createDecoratorAnnotation(flowBoundAnnotation)\n\nfunction cancelPromise(promise) {\n    if (isFunction(promise.cancel)) {\n        promise.cancel()\n    }\n}\n\nexport function flowResult<T>(\n    result: T\n): T extends Generator<any, infer R, any>\n    ? CancellablePromise<R>\n    : T extends CancellablePromise<any>\n    ? T\n    : never {\n    return result as any // just tricking TypeScript :)\n}\n\nexport function isFlow(fn: any): boolean {\n    return fn?.isMobXFlow === true\n}\n","import {\n    IObservableArray,\n    IObservableValue,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isObservableValue,\n    ObservableSet,\n    die,\n    isStringish\n} from \"../internal\"\n\nexport type ReadInterceptor<T> = (value: any) => T\n\n/** Experimental feature right now, tested indirectly via Mobx-State-Tree */\nexport function interceptReads<T>(value: IObservableValue<T>, handler: ReadInterceptor<T>): Lambda\nexport function interceptReads<T>(\n    observableArray: IObservableArray<T>,\n    handler: ReadInterceptor<T>\n): Lambda\nexport function interceptReads<K, V>(\n    observableMap: ObservableMap<K, V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads<V>(\n    observableSet: ObservableSet<V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads(\n    object: Object,\n    property: string,\n    handler: ReadInterceptor<any>\n): Lambda\nexport function interceptReads(thing, propOrHandler?, handler?): Lambda {\n    let target\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n        target = getAdministration(thing)\n    } else if (isObservableObject(thing)) {\n        if (__DEV__ && !isStringish(propOrHandler)) {\n            return die(\n                `InterceptReads can only be used with a specific property, not with an object in general`\n            )\n        }\n        target = getAdministration(thing, propOrHandler)\n    } else if (__DEV__) {\n        return die(`Expected observable map, object or array as first array`)\n    }\n    if (__DEV__ && target.dehancer !== undefined) {\n        return die(`An intercept reader was already established`)\n    }\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler\n    return () => {\n        target.dehancer = undefined\n    }\n}\n","import {\n    IArrayWillChange,\n    IArrayWillSplice,\n    IInterceptor,\n    IMapWillChange,\n    IObjectWillChange,\n    IObservableArray,\n    IObservableValue,\n    IValueWillChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetWillChange,\n    isFunction\n} from \"../internal\"\n\nexport function intercept<T>(\n    value: IObservableValue<T>,\n    handler: IInterceptor<IValueWillChange<T>>\n): Lambda\nexport function intercept<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    handler: IInterceptor<IArrayWillChange<T> | IArrayWillSplice<T>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    handler: IInterceptor<IMapWillChange<K, V>>\n): Lambda\nexport function intercept<V>(\n    observableSet: ObservableSet<V> | Set<V>,\n    handler: IInterceptor<ISetWillChange<V>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    handler: IInterceptor<IValueWillChange<V>>\n): Lambda\nexport function intercept(object: object, handler: IInterceptor<IObjectWillChange>): Lambda\nexport function intercept<T extends object, K extends keyof T>(\n    object: T,\n    property: K,\n    handler: IInterceptor<IValueWillChange<T[K]>>\n): Lambda\nexport function intercept(thing, propOrHandler?, handler?): Lambda {\n    if (isFunction(handler)) {\n        return interceptProperty(thing, propOrHandler, handler)\n    } else {\n        return interceptInterceptable(thing, propOrHandler)\n    }\n}\n\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept_(handler)\n}\n\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept_(handler)\n}\n","import { $mobx, getAtom, isComputedValue, isObservableObject, die, isStringish } from \"../internal\"\n\nexport function _isComputed(value, property?: PropertyKey): boolean {\n    if (property === undefined) {\n        return isComputedValue(value)\n    }\n    if (isObservableObject(value) === false) {\n        return false\n    }\n    if (!value[$mobx].values_.has(property)) {\n        return false\n    }\n    const atom = getAtom(value, property)\n    return isComputedValue(atom)\n}\n\nexport function isComputed(value: any): boolean {\n    if (__DEV__ && arguments.length > 1) {\n        return die(\n            `isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property`\n        )\n    }\n    return _isComputed(value)\n}\n\nexport function isComputedProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`isComputed expected a property name as second argument`)\n    }\n    return _isComputed(value, propName)\n}\n","import {\n    $mobx,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    die,\n    isStringish\n} from \"../internal\"\n\nfunction _isObservable(value, property?: PropertyKey): boolean {\n    if (!value) {\n        return false\n    }\n    if (property !== undefined) {\n        if (__DEV__ && (isObservableMap(value) || isObservableArray(value))) {\n            return die(\n                \"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\"\n            )\n        }\n        if (isObservableObject(value)) {\n            return value[$mobx].values_.has(property)\n        }\n        return false\n    }\n    // For first check, see #701\n    return (\n        isObservableObject(value) ||\n        !!value[$mobx] ||\n        isAtom(value) ||\n        isReaction(value) ||\n        isComputedValue(value)\n    )\n}\n\nexport function isObservable(value: any): boolean {\n    if (__DEV__ && arguments.length !== 1) {\n        die(\n            `isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property`\n        )\n    }\n    return _isObservable(value)\n}\n\nexport function isObservableProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`expected a property name as second argument`)\n    }\n    return _isObservable(value, propName)\n}\n","import {\n    $mobx,\n    IIsObservableObject,\n    IObservableArray,\n    ObservableMap,\n    ObservableSet,\n    ObservableObjectAdministration,\n    endBatch,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    startBatch,\n    die\n} from \"../internal\"\n\nexport function keys<K>(map: ObservableMap<K, any>): ReadonlyArray<K>\nexport function keys<T>(ar: IObservableArray<T>): ReadonlyArray<number>\nexport function keys<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function keys<T extends Object>(obj: T): ReadonlyArray<PropertyKey>\nexport function keys(obj: any): any {\n    if (isObservableObject(obj)) {\n        return (\n            (obj as any as IIsObservableObject)[$mobx] as ObservableObjectAdministration\n        ).keys_()\n    }\n    if (isObservableMap(obj) || isObservableSet(obj)) {\n        return Array.from(obj.keys())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((_, index) => index)\n    }\n    die(5)\n}\n\nexport function values<K, T>(map: ObservableMap<K, T>): ReadonlyArray<T>\nexport function values<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function values<T>(ar: IObservableArray<T>): ReadonlyArray<T>\nexport function values<T = any>(obj: T): ReadonlyArray<T extends object ? T[keyof T] : any>\nexport function values(obj: any): string[] {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => obj[key])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => obj.get(key))\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.values())\n    }\n    if (isObservableArray(obj)) {\n        return obj.slice()\n    }\n    die(6)\n}\n\nexport function entries<K, T>(map: ObservableMap<K, T>): ReadonlyArray<[K, T]>\nexport function entries<T>(set: ObservableSet<T>): ReadonlyArray<[T, T]>\nexport function entries<T>(ar: IObservableArray<T>): ReadonlyArray<[number, T]>\nexport function entries<T = any>(\n    obj: T\n): ReadonlyArray<[string, T extends object ? T[keyof T] : any]>\nexport function entries(obj: any): any {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => [key, obj[key]])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => [key, obj.get(key)])\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.entries())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((key, index) => [index, key])\n    }\n    die(7)\n}\n\nexport function set<V>(obj: ObservableMap<PropertyKey, V>, values: { [key: string]: V })\nexport function set<K, V>(obj: ObservableMap<K, V>, key: K, value: V)\nexport function set<T>(obj: ObservableSet<T>, value: T)\nexport function set<T>(obj: IObservableArray<T>, index: number, value: T)\nexport function set<T extends Object>(obj: T, values: { [key: string]: any })\nexport function set<T extends Object>(obj: T, key: PropertyKey, value: any)\nexport function set(obj: any, key: any, value?: any): void {\n    if (arguments.length === 2 && !isObservableSet(obj)) {\n        startBatch()\n        const values = key\n        try {\n            for (let key in values) {\n                set(obj, key, values[key])\n            }\n        } finally {\n            endBatch()\n        }\n        return\n    }\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].set_(key, value)\n    } else if (isObservableMap(obj)) {\n        obj.set(key, value)\n    } else if (isObservableSet(obj)) {\n        obj.add(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        if (key < 0) {\n            die(`Invalid index: '${key}'`)\n        }\n        startBatch()\n        if (key >= obj.length) {\n            obj.length = key + 1\n        }\n        obj[key] = value\n        endBatch()\n    } else {\n        die(8)\n    }\n}\n\nexport function remove<K, V>(obj: ObservableMap<K, V>, key: K)\nexport function remove<T>(obj: ObservableSet<T>, key: T)\nexport function remove<T>(obj: IObservableArray<T>, index: number)\nexport function remove<T extends Object>(obj: T, key: string)\nexport function remove(obj: any, key: any): void {\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].delete_(key)\n    } else if (isObservableMap(obj)) {\n        obj.delete(key)\n    } else if (isObservableSet(obj)) {\n        obj.delete(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        obj.splice(key, 1)\n    } else {\n        die(9)\n    }\n}\n\nexport function has<K>(obj: ObservableMap<K, any>, key: K): boolean\nexport function has<T>(obj: ObservableSet<T>, key: T): boolean\nexport function has<T>(obj: IObservableArray<T>, index: number): boolean\nexport function has<T extends Object>(obj: T, key: string): boolean\nexport function has(obj: any, key: any): boolean {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].has_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.has(key)\n    } else if (isObservableSet(obj)) {\n        return obj.has(key)\n    } else if (isObservableArray(obj)) {\n        return key >= 0 && key < obj.length\n    }\n    die(10)\n}\n\nexport function get<K, V>(obj: ObservableMap<K, V>, key: K): V | undefined\nexport function get<T>(obj: IObservableArray<T>, index: number): T | undefined\nexport function get<T extends Object>(obj: T, key: string): any\nexport function get(obj: any, key: any): any {\n    if (!has(obj, key)) {\n        return undefined\n    }\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].get_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.get(key)\n    } else if (isObservableArray(obj)) {\n        return obj[key]\n    }\n    die(11)\n}\n\nexport function apiDefineProperty(obj: Object, key: PropertyKey, descriptor: PropertyDescriptor) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].defineProperty_(key, descriptor)\n    }\n    die(39)\n}\n\nexport function apiOwnKeys(obj: Object) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].ownKeys_()\n    }\n    die(38)\n}\n","import {\n    IArrayDidChange,\n    IComputedValue,\n    IMapDidChange,\n    IObjectDidChange,\n    IObservableArray,\n    IObservableValue,\n    IValueDidChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetDidChange,\n    isFunction\n} from \"../internal\"\n\nexport function observe<T>(\n    value: IObservableValue<T> | IComputedValue<T>,\n    listener: (change: IValueDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    listener: (change: IArrayDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<V>(\n    // ObservableSet/ObservableMap are required despite they implement Set/Map: https://github.com/mobxjs/mobx/pull/3180#discussion_r746542929\n    observableSet: ObservableSet<V> | Set<V>,\n    listener: (change: ISetDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    listener: (change: IMapDidChange<K, V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    listener: (change: IValueDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(\n    object: Object,\n    listener: (change: IObjectDidChange) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T, K extends keyof T>(\n    object: T,\n    property: K,\n    listener: (change: IValueDidChange<T[K]>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(thing, propOrCb?, cbOrFire?, fireImmediately?): Lambda {\n    if (isFunction(cbOrFire)) {\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately)\n    } else {\n        return observeObservable(thing, propOrCb, cbOrFire)\n    }\n}\n\nfunction observeObservable(thing, listener, fireImmediately: boolean) {\n    return getAdministration(thing).observe_(listener, fireImmediately)\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately: boolean) {\n    return getAdministration(thing, property).observe_(listener, fireImmediately)\n}\n","import {\n    isObservable,\n    isObservableArray,\n    isObservableValue,\n    isObservableMap,\n    isObservableSet,\n    isComputedValue,\n    die,\n    apiOwnKeys,\n    objectPrototype\n} from \"../internal\"\n\nfunction cache<K, V>(map: Map<any, any>, key: K, value: V): V {\n    map.set(key, value)\n    return value\n}\n\nfunction toJSHelper(source, __alreadySeen: Map<any, any>) {\n    if (\n        source == null ||\n        typeof source !== \"object\" ||\n        source instanceof Date ||\n        !isObservable(source)\n    ) {\n        return source\n    }\n\n    if (isObservableValue(source) || isComputedValue(source)) {\n        return toJSHelper(source.get(), __alreadySeen)\n    }\n    if (__alreadySeen.has(source)) {\n        return __alreadySeen.get(source)\n    }\n    if (isObservableArray(source)) {\n        const res = cache(__alreadySeen, source, new Array(source.length))\n        source.forEach((value, idx) => {\n            res[idx] = toJSHelper(value, __alreadySeen)\n        })\n        return res\n    }\n    if (isObservableSet(source)) {\n        const res = cache(__alreadySeen, source, new Set())\n        source.forEach(value => {\n            res.add(toJSHelper(value, __alreadySeen))\n        })\n        return res\n    }\n    if (isObservableMap(source)) {\n        const res = cache(__alreadySeen, source, new Map())\n        source.forEach((value, key) => {\n            res.set(key, toJSHelper(value, __alreadySeen))\n        })\n        return res\n    } else {\n        // must be observable object\n        const res = cache(__alreadySeen, source, {})\n        apiOwnKeys(source).forEach((key: any) => {\n            if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n                res[key] = toJSHelper(source[key], __alreadySeen)\n            }\n        })\n        return res\n    }\n}\n\n/**\n * Recursively converts an observable to it's non-observable native counterpart.\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\n * Computed and other non-enumerable properties are completely ignored.\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\n */\nexport function toJS<T>(source: T, options?: any): T {\n    if (__DEV__ && options) {\n        die(\"toJS no longer supports options\")\n    }\n    return toJSHelper(source, new Map())\n}\n","import { TraceMode, die, getAtom, globalState } from \"../internal\"\n\nexport function trace(thing?: any, prop?: string, enterBreakPoint?: boolean): void\nexport function trace(thing?: any, enterBreakPoint?: boolean): void\nexport function trace(enterBreakPoint?: boolean): void\nexport function trace(...args: any[]): void {\n    if (!__DEV__) {\n        return\n    }\n    let enterBreakPoint = false\n    if (typeof args[args.length - 1] === \"boolean\") {\n        enterBreakPoint = args.pop()\n    }\n    const derivation = getAtomFromArgs(args)\n    if (!derivation) {\n        return die(\n            `'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly`\n        )\n    }\n    if (derivation.isTracing_ === TraceMode.NONE) {\n        console.log(`[mobx.trace] '${derivation.name_}' tracing enabled`)\n    }\n    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG\n}\n\nfunction getAtomFromArgs(args): any {\n    switch (args.length) {\n        case 0:\n            return globalState.trackingDerivation\n        case 1:\n            return getAtom(args[0])\n        case 2:\n            return getAtom(args[0], args[1])\n    }\n}\n","import { endBatch, startBatch } from \"../internal\"\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the 'action' parameter.\n */\nexport function transaction<T>(action: () => T, thisArg = undefined): T {\n    startBatch()\n    try {\n        return action.apply(thisArg)\n    } finally {\n        endBatch()\n    }\n}\n","import {\n    $mobx,\n    IReactionDisposer,\n    Lambda,\n    autorun,\n    createAction,\n    getNextId,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IWhenOptions {\n    name?: string\n    timeout?: number\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\nexport function when(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void }\nexport function when(\n    predicate: () => boolean,\n    effect: Lambda,\n    opts?: IWhenOptions\n): IReactionDisposer\nexport function when(predicate: any, arg1?: any, arg2?: any): any {\n    if (arguments.length === 1 || (arg1 && typeof arg1 === \"object\")) {\n        return whenPromise(predicate, arg1)\n    }\n    return _when(predicate, arg1, arg2 || {})\n}\n\nfunction _when(predicate: () => boolean, effect: Lambda, opts: IWhenOptions): IReactionDisposer {\n    let timeoutHandle: any\n    if (typeof opts.timeout === \"number\") {\n        const error = new Error(\"WHEN_TIMEOUT\")\n        timeoutHandle = setTimeout(() => {\n            if (!disposer[$mobx].isDisposed_) {\n                disposer()\n                if (opts.onError) {\n                    opts.onError(error)\n                } else {\n                    throw error\n                }\n            }\n        }, opts.timeout)\n    }\n\n    opts.name = __DEV__ ? opts.name || \"When@\" + getNextId() : \"When\"\n    const effectAction = createAction(\n        __DEV__ ? opts.name + \"-effect\" : \"When-effect\",\n        effect as Function\n    )\n    // eslint-disable-next-line\n    var disposer = autorun(r => {\n        // predicate should not change state\n        let cond = allowStateChanges(false, predicate)\n        if (cond) {\n            r.dispose()\n            if (timeoutHandle) {\n                clearTimeout(timeoutHandle)\n            }\n            effectAction()\n        }\n    }, opts)\n    return disposer\n}\n\nfunction whenPromise(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void } {\n    if (__DEV__ && opts && opts.onError) {\n        return die(`the options 'onError' and 'promise' cannot be combined`)\n    }\n    if (opts?.signal?.aborted) {\n        return Object.assign(Promise.reject(new Error(\"WHEN_ABORTED\")), { cancel: () => null })\n    }\n    let cancel\n    let abort\n    const res = new Promise((resolve, reject) => {\n        let disposer = _when(predicate, resolve as Lambda, { ...opts, onError: reject })\n        cancel = () => {\n            disposer()\n            reject(new Error(\"WHEN_CANCELLED\"))\n        }\n        abort = () => {\n            disposer()\n            reject(new Error(\"WHEN_ABORTED\"))\n        }\n        opts?.signal?.addEventListener?.(\"abort\", abort)\n    }).finally(() => opts?.signal?.removeEventListener?.(\"abort\", abort))\n    ;(res as any).cancel = cancel\n    return res as any\n}\n","import {\n    $mobx,\n    IIsObservableObject,\n    ObservableObjectAdministration,\n    warnAboutProxyRequirement,\n    assertProxies,\n    die,\n    isStringish,\n    globalState,\n    CreateObservableOptions,\n    asObservableObject\n} from \"../internal\"\n\nfunction getAdm(target): ObservableObjectAdministration {\n    return target[$mobx]\n}\n\n// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nconst objectProxyTraps: ProxyHandler<any> = {\n    has(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).has_(name)\n    },\n    get(target: IIsObservableObject, name: PropertyKey): any {\n        return getAdm(target).get_(name)\n    },\n    set(target: IIsObservableObject, name: PropertyKey, value: any): boolean {\n        if (!isStringish(name)) {\n            return false\n        }\n        if (__DEV__ && !getAdm(target).values_.has(name)) {\n            warnAboutProxyRequirement(\n                \"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).set_(name, value, true) ?? true\n    },\n    deleteProperty(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"delete properties from an observable object. Use 'remove' from 'mobx' instead.\"\n            )\n        }\n        if (!isStringish(name)) {\n            return false\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).delete_(name, true) ?? true\n    },\n    defineProperty(\n        target: IIsObservableObject,\n        name: PropertyKey,\n        descriptor: PropertyDescriptor\n    ): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).defineProperty_(name, descriptor) ?? true\n    },\n    ownKeys(target: IIsObservableObject): ArrayLike<string | symbol> {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).ownKeys_()\n    },\n    preventExtensions(target) {\n        die(13)\n    }\n}\n\nexport function asDynamicObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    assertProxies()\n    target = asObservableObject(target, options)\n    return (target[$mobx].proxy_ ??= new Proxy(target, objectProxyTraps))\n}\n","import { Lambda, once, untrackedEnd, untrackedStart, die } from \"../internal\"\n\nexport type IInterceptor<T> = (change: T) => T | null\n\nexport interface IInterceptable<T> {\n    interceptors_: IInterceptor<T>[] | undefined\n}\n\nexport function hasInterceptors(interceptable: IInterceptable<any>) {\n    return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0\n}\n\nexport function registerInterceptor<T>(\n    interceptable: IInterceptable<T>,\n    handler: IInterceptor<T>\n): Lambda {\n    const interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = [])\n    interceptors.push(handler)\n    return once(() => {\n        const idx = interceptors.indexOf(handler)\n        if (idx !== -1) {\n            interceptors.splice(idx, 1)\n        }\n    })\n}\n\nexport function interceptChange<T>(\n    interceptable: IInterceptable<T | null>,\n    change: T | null\n): T | null {\n    const prevU = untrackedStart()\n    try {\n        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n        const interceptors = [...(interceptable.interceptors_ || [])]\n        for (let i = 0, l = interceptors.length; i < l; i++) {\n            change = interceptors[i](change)\n            if (change && !(change as any).type) {\n                die(14)\n            }\n            if (!change) {\n                break\n            }\n        }\n        return change\n    } finally {\n        untrackedEnd(prevU)\n    }\n}\n","import { Lambda, once, untrackedEnd, untrackedStart } from \"../internal\"\n\nexport interface IListenable {\n    changeListeners_: Function[] | undefined\n}\n\nexport function hasListeners(listenable: IListenable) {\n    return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0\n}\n\nexport function registerListener(listenable: IListenable, handler: Function): Lambda {\n    const listeners = listenable.changeListeners_ || (listenable.changeListeners_ = [])\n    listeners.push(handler)\n    return once(() => {\n        const idx = listeners.indexOf(handler)\n        if (idx !== -1) {\n            listeners.splice(idx, 1)\n        }\n    })\n}\n\nexport function notifyListeners<T>(listenable: IListenable, change: T) {\n    const prevU = untrackedStart()\n    let listeners = listenable.changeListeners_\n    if (!listeners) {\n        return\n    }\n    listeners = listeners.slice()\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change)\n    }\n    untrackedEnd(prevU)\n}\n","import {\n    $mobx,\n    asObservableObject,\n    AnnotationsMap,\n    CreateObservableOptions,\n    ObservableObjectAdministration,\n    collectStoredAnnotations,\n    isPlainObject,\n    isObservableObject,\n    die,\n    ownKeys,\n    extendObservable,\n    addHiddenProp,\n    storedAnnotationsSymbol,\n    initObservable\n} from \"../internal\"\n\n// Hack based on https://github.com/Microsoft/TypeScript/issues/14829#issuecomment-322267089\n// We need this, because otherwise, AdditionalKeys is going to be inferred to be any\n// set of superfluous keys. But, we rather want to get a compile error unless AdditionalKeys is\n// _explicity_ passed as generic argument\n// Fixes: https://github.com/mobxjs/mobx/issues/2325#issuecomment-691070022\ntype NoInfer<T> = [T][T extends any ? 0 : never]\n\ntype MakeObservableOptions = Omit<CreateObservableOptions, \"proxy\">\n\nexport function makeObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    annotations?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        if (__DEV__ && annotations && target[storedAnnotationsSymbol]) {\n            die(\n                `makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.`\n            )\n        }\n        // Default to decorators\n        annotations ??= collectStoredAnnotations(target)\n\n        // Annotate\n        ownKeys(annotations).forEach(key => adm.make_(key, annotations![key]))\n    })\n    return target\n}\n\n// proto[keysSymbol] = new Set<PropertyKey>()\nconst keysSymbol = Symbol(\"mobx-keys\")\n\nexport function makeAutoObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    overrides?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    if (__DEV__) {\n        if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {\n            die(`'makeAutoObservable' can only be used for classes that don't have a superclass`)\n        }\n        if (isObservableObject(target)) {\n            die(`makeAutoObservable can only be used on objects not already made observable`)\n        }\n    }\n\n    // Optimization: avoid visiting protos\n    // Assumes that annotation.make_/.extend_ works the same for plain objects\n    if (isPlainObject(target)) {\n        return extendObservable(target, target, overrides, options)\n    }\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n\n        // Optimization: cache keys on proto\n        // Assumes makeAutoObservable can be called only once per object and can't be used in subclass\n        if (!target[keysSymbol]) {\n            const proto = Object.getPrototypeOf(target)\n            const keys = new Set([...ownKeys(target), ...ownKeys(proto)])\n            keys.delete(\"constructor\")\n            keys.delete($mobx)\n            addHiddenProp(proto, keysSymbol, keys)\n        }\n\n        target[keysSymbol].forEach(key =>\n            adm.make_(\n                key,\n                // must pass \"undefined\" for { key: undefined }\n                !overrides ? true : key in overrides ? overrides[key] : true\n            )\n        )\n    })\n\n    return target\n}\n","import {\n    $mobx,\n    Atom,\n    EMPTY_ARRAY,\n    IAtom,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    addHiddenFinalProp,\n    checkIfStateModificationsAreAllowed,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    assertProxies,\n    reserveArrayBuffer,\n    hasProp,\n    die,\n    globalState,\n    initObservable\n} from \"../internal\"\n\nconst SPLICE = \"splice\"\nexport const UPDATE = \"update\"\nexport const MAX_SPLICE_SIZE = 10000 // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nexport interface IObservableArray<T = any> extends Array<T> {\n    spliceWithArray(index: number, deleteCount?: number, newItems?: T[]): T[]\n    clear(): T[]\n    replace(newItems: T[]): T[]\n    remove(value: T): boolean\n    toJSON(): T[]\n}\n\ninterface IArrayBaseChange<T> {\n    object: IObservableArray<T>\n    observableKind: \"array\"\n    debugObjectName: string\n    index: number\n}\n\nexport type IArrayDidChange<T = any> = IArrayUpdate<T> | IArraySplice<T>\n\nexport interface IArrayUpdate<T = any> extends IArrayBaseChange<T> {\n    type: \"update\"\n    newValue: T\n    oldValue: T\n}\n\nexport interface IArraySplice<T = any> extends IArrayBaseChange<T> {\n    type: \"splice\"\n    added: T[]\n    addedCount: number\n    removed: T[]\n    removedCount: number\n}\n\nexport interface IArrayWillChange<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"update\"\n    newValue: T\n}\n\nexport interface IArrayWillSplice<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"splice\"\n    added: T[]\n    removedCount: number\n}\n\nconst arrayTraps = {\n    get(target, name) {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === $mobx) {\n            return adm\n        }\n        if (name === \"length\") {\n            return adm.getArrayLength_()\n        }\n        if (typeof name === \"string\" && !isNaN(name as any)) {\n            return adm.get_(parseInt(name))\n        }\n        if (hasProp(arrayExtensions, name)) {\n            return arrayExtensions[name]\n        }\n        return target[name]\n    },\n    set(target, name, value): boolean {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === \"length\") {\n            adm.setArrayLength_(value)\n        }\n        if (typeof name === \"symbol\" || isNaN(name)) {\n            target[name] = value\n        } else {\n            // numeric string\n            adm.set_(parseInt(name), value)\n        }\n        return true\n    },\n    preventExtensions() {\n        die(15)\n    }\n}\n\nexport class ObservableArrayAdministration\n    implements IInterceptable<IArrayWillChange<any> | IArrayWillSplice<any>>, IListenable\n{\n    atom_: IAtom\n    readonly values_: any[] = [] // this is the prop that gets proxied, so can't replace it!\n    interceptors_\n    changeListeners_\n    enhancer_: (newV: any, oldV: any | undefined) => any\n    dehancer: any\n    proxy_!: IObservableArray<any>\n    lastKnownLength_ = 0\n\n    constructor(\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        enhancer: IEnhancer<any>,\n        public owned_: boolean,\n        public legacyMode_: boolean\n    ) {\n        this.atom_ = new Atom(name)\n        this.enhancer_ = (newV, oldV) =>\n            enhancer(newV, oldV, __DEV__ ? name + \"[..]\" : \"ObservableArray[..]\")\n    }\n\n    dehanceValue_(value: any): any {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    dehanceValues_(values: any[]): any[] {\n        if (this.dehancer !== undefined && values.length > 0) {\n            return values.map(this.dehancer) as any\n        }\n        return values\n    }\n\n    intercept_(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda {\n        return registerInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>(this, handler)\n    }\n\n    observe_(\n        listener: (changeData: IArrayDidChange<any>) => void,\n        fireImmediately = false\n    ): Lambda {\n        if (fireImmediately) {\n            listener(<IArraySplice<any>>{\n                observableKind: \"array\",\n                object: this.proxy_ as any,\n                debugObjectName: this.atom_.name_,\n                type: \"splice\",\n                index: 0,\n                added: this.values_.slice(),\n                addedCount: this.values_.length,\n                removed: [],\n                removedCount: 0\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    getArrayLength_(): number {\n        this.atom_.reportObserved()\n        return this.values_.length\n    }\n\n    setArrayLength_(newLength: number) {\n        if (typeof newLength !== \"number\" || isNaN(newLength) || newLength < 0) {\n            die(\"Out of range: \" + newLength)\n        }\n        let currentLength = this.values_.length\n        if (newLength === currentLength) {\n            return\n        } else if (newLength > currentLength) {\n            const newItems = new Array(newLength - currentLength)\n            for (let i = 0; i < newLength - currentLength; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            this.spliceWithArray_(currentLength, 0, newItems)\n        } else {\n            this.spliceWithArray_(newLength, currentLength - newLength)\n        }\n    }\n\n    updateArrayLength_(oldLength: number, delta: number) {\n        if (oldLength !== this.lastKnownLength_) {\n            die(16)\n        }\n        this.lastKnownLength_ += delta\n        if (this.legacyMode_ && delta > 0) {\n            reserveArrayBuffer(oldLength + delta + 1)\n        }\n    }\n\n    spliceWithArray_(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        const length = this.values_.length\n\n        if (index === undefined) {\n            index = 0\n        } else if (index > length) {\n            index = length\n        } else if (index < 0) {\n            index = Math.max(0, length + index)\n        }\n\n        if (arguments.length === 1) {\n            deleteCount = length - index\n        } else if (deleteCount === undefined || deleteCount === null) {\n            deleteCount = 0\n        } else {\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index))\n        }\n\n        if (newItems === undefined) {\n            newItems = EMPTY_ARRAY\n        }\n\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IArrayWillSplice<any>>(this as any, {\n                object: this.proxy_ as any,\n                type: SPLICE,\n                index,\n                removedCount: deleteCount,\n                added: newItems\n            })\n            if (!change) {\n                return EMPTY_ARRAY\n            }\n            deleteCount = change.removedCount\n            newItems = change.added\n        }\n\n        newItems =\n            newItems.length === 0 ? newItems : newItems.map(v => this.enhancer_(v, undefined))\n        if (this.legacyMode_ || __DEV__) {\n            const lengthDelta = newItems.length - deleteCount\n            this.updateArrayLength_(length, lengthDelta) // checks if internal array wasn't modified\n        }\n        const res = this.spliceItemsIntoValues_(index, deleteCount, newItems)\n\n        if (deleteCount !== 0 || newItems.length !== 0) {\n            this.notifyArraySplice_(index, newItems, res)\n        }\n        return this.dehanceValues_(res)\n    }\n\n    spliceItemsIntoValues_(index: number, deleteCount: number, newItems: any[]): any[] {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return this.values_.splice(index, deleteCount, ...newItems)\n        } else {\n            // The items removed by the splice\n            const res = this.values_.slice(index, index + deleteCount)\n            // The items that that should remain at the end of the array\n            let oldItems = this.values_.slice(index + deleteCount)\n            // New length is the previous length + addition count - deletion count\n            this.values_.length += newItems.length - deleteCount\n            for (let i = 0; i < newItems.length; i++) {\n                this.values_[index + i] = newItems[i]\n            }\n            for (let i = 0; i < oldItems.length; i++) {\n                this.values_[index + newItems.length + i] = oldItems[i]\n            }\n            return res\n        }\n    }\n\n    notifyArrayChildUpdate_(index: number, newValue: any, oldValue: any) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArrayDidChange | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      type: UPDATE,\n                      debugObjectName: this.atom_.name_,\n                      index,\n                      newValue,\n                      oldValue\n                  } as const)\n                : null\n\n        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    notifyArraySplice_(index: number, added: any[], removed: any[]) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArraySplice | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      debugObjectName: this.atom_.name_,\n                      type: SPLICE,\n                      index,\n                      removed,\n                      added,\n                      removedCount: removed.length,\n                      addedCount: added.length\n                  } as const)\n                : null\n\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get_(index: number): any | undefined {\n        if (this.legacyMode_ && index >= this.values_.length) {\n            console.warn(\n                __DEV__\n                    ? `[mobx.array] Attempt to read an array index (${index}) that is out of bounds (${this.values_.length}). Please check length first. Out of bound indices will not be tracked by MobX`\n                    : `[mobx] Out of bounds read: ${index}`\n            )\n            return undefined\n        }\n        this.atom_.reportObserved()\n        return this.dehanceValue_(this.values_[index])\n    }\n\n    set_(index: number, newValue: any) {\n        const values = this.values_\n        if (this.legacyMode_ && index > values.length) {\n            // out of bounds\n            die(17, index, values.length)\n        }\n        if (index < values.length) {\n            // update at index in range\n            checkIfStateModificationsAreAllowed(this.atom_)\n            const oldValue = values[index]\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IArrayWillChange<any>>(this as any, {\n                    type: UPDATE,\n                    object: this.proxy_ as any, // since \"this\" is the real array we need to pass its proxy\n                    index,\n                    newValue\n                })\n                if (!change) {\n                    return\n                }\n                newValue = change.newValue\n            }\n            newValue = this.enhancer_(newValue, oldValue)\n            const changed = newValue !== oldValue\n            if (changed) {\n                values[index] = newValue\n                this.notifyArrayChildUpdate_(index, newValue, oldValue)\n            }\n        } else {\n            // For out of bound index, we don't create an actual sparse array,\n            // but rather fill the holes with undefined (same as setArrayLength_).\n            // This could be considered a bug.\n            const newItems = new Array(index + 1 - values.length)\n            for (let i = 0; i < newItems.length - 1; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            newItems[newItems.length - 1] = newValue\n            this.spliceWithArray_(values.length, 0, newItems)\n        }\n    }\n}\n\nexport function createObservableArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n    owned = false\n): IObservableArray<T> {\n    assertProxies()\n    return initObservable(() => {\n        const adm = new ObservableArrayAdministration(name, enhancer, owned, false)\n        addHiddenFinalProp(adm.values_, $mobx, adm)\n        const proxy = new Proxy(adm.values_, arrayTraps) as any\n        adm.proxy_ = proxy\n        if (initialValues && initialValues.length) {\n            adm.spliceWithArray_(0, 0, initialValues)\n        }\n        return proxy\n    })\n}\n\n// eslint-disable-next-line\nexport var arrayExtensions = {\n    clear(): any[] {\n        return this.splice(0)\n    },\n\n    replace(newItems: any[]) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        return adm.spliceWithArray_(0, adm.values_.length, newItems)\n    },\n\n    // Used by JSON.stringify\n    toJSON(): any[] {\n        return this.slice()\n    },\n\n    /*\n     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n     * since these functions alter the inner structure of the array, the have side effects.\n     * Because the have side effects, they should not be used in computed function,\n     * and for that reason the do not call dependencyState.notifyObserved\n     */\n    splice(index: number, deleteCount?: number, ...newItems: any[]): any[] {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        switch (arguments.length) {\n            case 0:\n                return []\n            case 1:\n                return adm.spliceWithArray_(index)\n            case 2:\n                return adm.spliceWithArray_(index, deleteCount)\n        }\n        return adm.spliceWithArray_(index, deleteCount, newItems)\n    },\n\n    spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        return (this[$mobx] as ObservableArrayAdministration).spliceWithArray_(\n            index,\n            deleteCount,\n            newItems\n        )\n    },\n\n    push(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(adm.values_.length, 0, items)\n        return adm.values_.length\n    },\n\n    pop() {\n        return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0]\n    },\n\n    shift() {\n        return this.splice(0, 1)[0]\n    },\n\n    unshift(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(0, 0, items)\n        return adm.values_.length\n    },\n\n    reverse(): any[] {\n        // reverse by default mutates in place before returning the result\n        // which makes it both a 'derivation' and a 'mutation'.\n        if (globalState.trackingDerivation) {\n            die(37, \"reverse\")\n        }\n        this.replace(this.slice().reverse())\n        return this\n    },\n\n    sort(): any[] {\n        // sort by default mutates in place before returning the result\n        // which goes against all good practices. Let's not change the array in place!\n        if (globalState.trackingDerivation) {\n            die(37, \"sort\")\n        }\n        const copy = this.slice()\n        copy.sort.apply(copy, arguments)\n        this.replace(copy)\n        return this\n    },\n\n    remove(value: any): boolean {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        const idx = adm.dehanceValues_(adm.values_).indexOf(value)\n        if (idx > -1) {\n            this.splice(idx, 1)\n            return true\n        }\n        return false\n    }\n}\n\n/**\n * Wrap function from prototype\n * Without this, everything works as well, but this works\n * faster as everything works on unproxied values\n */\naddArrayExtension(\"concat\", simpleFunc)\naddArrayExtension(\"flat\", simpleFunc)\naddArrayExtension(\"includes\", simpleFunc)\naddArrayExtension(\"indexOf\", simpleFunc)\naddArrayExtension(\"join\", simpleFunc)\naddArrayExtension(\"lastIndexOf\", simpleFunc)\naddArrayExtension(\"slice\", simpleFunc)\naddArrayExtension(\"toString\", simpleFunc)\naddArrayExtension(\"toLocaleString\", simpleFunc)\n// map\naddArrayExtension(\"every\", mapLikeFunc)\naddArrayExtension(\"filter\", mapLikeFunc)\naddArrayExtension(\"find\", mapLikeFunc)\naddArrayExtension(\"findIndex\", mapLikeFunc)\naddArrayExtension(\"flatMap\", mapLikeFunc)\naddArrayExtension(\"forEach\", mapLikeFunc)\naddArrayExtension(\"map\", mapLikeFunc)\naddArrayExtension(\"some\", mapLikeFunc)\n// reduce\naddArrayExtension(\"reduce\", reduceLikeFunc)\naddArrayExtension(\"reduceRight\", reduceLikeFunc)\n\nfunction addArrayExtension(funcName, funcFactory) {\n    if (typeof Array.prototype[funcName] === \"function\") {\n        arrayExtensions[funcName] = funcFactory(funcName)\n    }\n}\n\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\n// Make sure callbacks recieve correct array arg #2326\nfunction mapLikeFunc(funcName) {\n    return function (callback, thisArg) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName]((element, index) => {\n            return callback.call(thisArg, element, index, this)\n        })\n    }\n}\n\n// Make sure callbacks recieve correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        // #2432 - reduce behavior depends on arguments.length\n        const callback = arguments[0]\n        arguments[0] = (accumulator, currentValue, index) => {\n            return callback(accumulator, currentValue, index, this)\n        }\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\nconst isObservableArrayAdministration = createInstanceofPredicate(\n    \"ObservableArrayAdministration\",\n    ObservableArrayAdministration\n)\n\nexport function isObservableArray(thing): thing is IObservableArray<any> {\n    return isObject(thing) && isObservableArrayAdministration(thing[$mobx])\n}\n","import {\n    CreateObservableOptions,\n    getAnnotationFromOptions,\n    propagateChanged,\n    isAnnotation,\n    $mobx,\n    Atom,\n    Annotation,\n    ComputedValue,\n    IAtom,\n    IComputedValueOptions,\n    IEnhancer,\n    IInterceptable,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    addHiddenProp,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isPlainObject,\n    isSpyEnabled,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    stringifyKey,\n    globalState,\n    ADD,\n    UPDATE,\n    die,\n    hasProp,\n    getDescriptor,\n    storedAnnotationsSymbol,\n    ownKeys,\n    isOverride,\n    defineProperty,\n    autoAnnotation,\n    getAdministration,\n    getDebugName,\n    objectPrototype,\n    MakeResult,\n    checkIfStateModificationsAreAllowed\n} from \"../internal\"\n\nconst descriptorCache = Object.create(null)\n\nexport type IObjectDidChange<T = any> = {\n    observableKind: \"object\"\n    name: PropertyKey\n    object: T\n    debugObjectName: string\n} & (\n    | {\n          type: \"add\"\n          newValue: any\n      }\n    | {\n          type: \"update\"\n          oldValue: any\n          newValue: any\n      }\n    | {\n          type: \"remove\"\n          oldValue: any\n      }\n)\n\nexport type IObjectWillChange<T = any> =\n    | {\n          object: T\n          type: \"update\" | \"add\"\n          name: PropertyKey\n          newValue: any\n      }\n    | {\n          object: T\n          type: \"remove\"\n          name: PropertyKey\n      }\n\nconst REMOVE = \"remove\"\n\nexport class ObservableObjectAdministration\n    implements IInterceptable<IObjectWillChange>, IListenable\n{\n    keysAtom_: IAtom\n    changeListeners_\n    interceptors_\n    proxy_: any\n    isPlainObject_: boolean\n    appliedAnnotations_?: object\n    private pendingKeys_: undefined | Map<PropertyKey, ObservableValue<boolean>>\n\n    constructor(\n        public target_: any,\n        public values_ = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n        public name_: string,\n        // Used anytime annotation is not explicitely provided\n        public defaultAnnotation_: Annotation = autoAnnotation\n    ) {\n        this.keysAtom_ = new Atom(__DEV__ ? `${this.name_}.keys` : \"ObservableObject.keys\")\n        // Optimization: we use this frequently\n        this.isPlainObject_ = isPlainObject(this.target_)\n        if (__DEV__ && !isAnnotation(this.defaultAnnotation_)) {\n            die(`defaultAnnotation must be valid annotation`)\n        }\n        if (__DEV__) {\n            // Prepare structure for tracking which fields were already annotated\n            this.appliedAnnotations_ = {}\n        }\n    }\n\n    getObservablePropValue_(key: PropertyKey): any {\n        return this.values_.get(key)!.get()\n    }\n\n    setObservablePropValue_(key: PropertyKey, newValue): boolean | null {\n        const observable = this.values_.get(key)\n        if (observable instanceof ComputedValue) {\n            observable.set(newValue)\n            return true\n        }\n\n        // intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                type: UPDATE,\n                object: this.proxy_ || this.target_,\n                name: key,\n                newValue\n            })\n            if (!change) {\n                return null\n            }\n            newValue = (change as any).newValue\n        }\n        newValue = (observable as any).prepareNewValue_(newValue)\n\n        // notify spy & observers\n        if (newValue !== globalState.UNCHANGED) {\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? {\n                          type: UPDATE,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            ;(observable as ObservableValue<any>).setNewValue_(newValue)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n        return true\n    }\n\n    get_(key: PropertyKey): any {\n        if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n            // Key doesn't exist yet, subscribe for it in case it's added later\n            this.has_(key)\n        }\n        return this.target_[key]\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {any} value\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    set_(key: PropertyKey, value: any, proxyTrap: boolean = false): boolean | null {\n        // Don't use .has(key) - we care about own\n        if (hasProp(this.target_, key)) {\n            // Existing prop\n            if (this.values_.has(key)) {\n                // Observable (can be intercepted)\n                return this.setObservablePropValue_(key, value)\n            } else if (proxyTrap) {\n                // Non-observable - proxy\n                return Reflect.set(this.target_, key, value)\n            } else {\n                // Non-observable\n                this.target_[key] = value\n                return true\n            }\n        } else {\n            // New prop\n            return this.extend_(\n                key,\n                { value, enumerable: true, writable: true, configurable: true },\n                this.defaultAnnotation_,\n                proxyTrap\n            )\n        }\n    }\n\n    // Trap for \"in\"\n    has_(key: PropertyKey): boolean {\n        if (!globalState.trackingDerivation) {\n            // Skip key subscription outside derivation\n            return key in this.target_\n        }\n        this.pendingKeys_ ||= new Map()\n        let entry = this.pendingKeys_.get(key)\n        if (!entry) {\n            entry = new ObservableValue(\n                key in this.target_,\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableObject.key?\",\n                false\n            )\n            this.pendingKeys_.set(key, entry)\n        }\n        return entry.get()\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\n     */\n    make_(key: PropertyKey, annotation: Annotation | boolean): void {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return\n        }\n        assertAnnotable(this, annotation, key)\n        if (!(key in this.target_)) {\n            // Throw on missing key, except for decorators:\n            // Decorator annotations are collected from whole prototype chain.\n            // When called from super() some props may not exist yet.\n            // However we don't have to worry about missing prop,\n            // because the decorator must have been applied to something.\n            if (this.target_[storedAnnotationsSymbol]?.[key]) {\n                return // will be annotated by subclass constructor\n            } else {\n                die(1, annotation.annotationType_, `${this.name_}.${key.toString()}`)\n            }\n        }\n        let source = this.target_\n        while (source && source !== objectPrototype) {\n            const descriptor = getDescriptor(source, key)\n            if (descriptor) {\n                const outcome = annotation.make_(this, key, descriptor, source)\n                if (outcome === MakeResult.Cancel) {\n                    return\n                }\n                if (outcome === MakeResult.Break) {\n                    break\n                }\n            }\n            source = Object.getPrototypeOf(source)\n        }\n        recordAnnotationApplied(this, annotation, key)\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    extend_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        annotation: Annotation | boolean,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return this.defineProperty_(key, descriptor, proxyTrap)\n        }\n        assertAnnotable(this, annotation, key)\n        const outcome = annotation.extend_(this, key, descriptor, proxyTrap)\n        if (outcome) {\n            recordAnnotationApplied(this, annotation, key)\n        }\n        return outcome\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    defineProperty_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: descriptor.value\n                })\n                if (!change) {\n                    return null\n                }\n                const { newValue } = change as any\n                if (descriptor.value !== newValue) {\n                    descriptor = {\n                        ...descriptor,\n                        value: newValue\n                    }\n                }\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            // Notify\n            this.notifyPropertyAddition_(key, descriptor.value)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineObservableProperty_(\n        key: PropertyKey,\n        value: any,\n        enhancer: IEnhancer<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: value\n                })\n                if (!change) {\n                    return null\n                }\n                value = (change as any).newValue\n            }\n\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: true,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            const observable = new ObservableValue(\n                value,\n                enhancer,\n                __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\",\n                false\n            )\n\n            this.values_.set(key, observable)\n\n            // Notify (value possibly changed by ObservableValue)\n            this.notifyPropertyAddition_(key, observable.value_)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineComputedProperty_(\n        key: PropertyKey,\n        options: IComputedValueOptions<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: undefined\n                })\n                if (!change) {\n                    return null\n                }\n            }\n            options.name ||= __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\"\n            options.context = this.proxy_ || this.target_\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: false,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            this.values_.set(key, new ComputedValue(options))\n\n            // Notify\n            this.notifyPropertyAddition_(key, undefined)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    delete_(key: PropertyKey, proxyTrap: boolean = false): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        // No such prop\n        if (!hasProp(this.target_, key)) {\n            return true\n        }\n\n        // Intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                object: this.proxy_ || this.target_,\n                name: key,\n                type: REMOVE\n            })\n            // Cancelled\n            if (!change) {\n                return null\n            }\n        }\n\n        // Delete\n        try {\n            startBatch()\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const observable = this.values_.get(key)\n            // Value needed for spies/listeners\n            let value = undefined\n            // Optimization: don't pull the value unless we will need it\n            if (!observable && (notify || notifySpy)) {\n                value = getDescriptor(this.target_, key)?.value\n            }\n            // delete prop (do first, may fail)\n            if (proxyTrap) {\n                if (!Reflect.deleteProperty(this.target_, key)) {\n                    return false\n                }\n            } else {\n                delete this.target_[key]\n            }\n            // Allow re-annotating this field\n            if (__DEV__) {\n                delete this.appliedAnnotations_![key]\n            }\n            // Clear observable\n            if (observable) {\n                this.values_.delete(key)\n                // for computed, value is undefined\n                if (observable instanceof ObservableValue) {\n                    value = observable.value_\n                }\n                // Notify: autorun(() => obj[key]), see #1796\n                propagateChanged(observable)\n            }\n            // Notify \"keys/entries/values\" observers\n            this.keysAtom_.reportChanged()\n\n            // Notify \"has\" observers\n            // \"in\" as it may still exist in proto\n            this.pendingKeys_?.get(key)?.set(key in this.target_)\n\n            // Notify spies/listeners\n            if (notify || notifySpy) {\n                const change: IObjectDidChange = {\n                    type: REMOVE,\n                    observableKind: \"object\",\n                    object: this.proxy_ || this.target_,\n                    debugObjectName: this.name_,\n                    oldValue: value,\n                    name: key\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportStart(change!)\n                }\n                if (notify) {\n                    notifyListeners(this, change)\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportEnd()\n                }\n            }\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(callback: (changes: IObjectDidChange) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support the fire immediately property for observable objects.\")\n        }\n        return registerListener(this, callback)\n    }\n\n    intercept_(handler): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    notifyPropertyAddition_(key: PropertyKey, value: any) {\n        const notify = hasListeners(this)\n        const notifySpy = __DEV__ && isSpyEnabled()\n        if (notify || notifySpy) {\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? ({\n                          type: ADD,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          name: key,\n                          newValue: value\n                      } as const)\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n\n        this.pendingKeys_?.get(key)?.set(true)\n\n        // Notify \"keys/entries/values\" observers\n        this.keysAtom_.reportChanged()\n    }\n\n    ownKeys_(): ArrayLike<string | symbol> {\n        this.keysAtom_.reportObserved()\n        return ownKeys(this.target_)\n    }\n\n    keys_(): PropertyKey[] {\n        // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n        // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n        // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n        // We choose to over-report in Object.keys(object), because:\n        // - typically it's used with simple data objects\n        // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n        this.keysAtom_.reportObserved()\n        return Object.keys(this.target_)\n    }\n}\n\nexport interface IIsObservableObject {\n    $mobx: ObservableObjectAdministration\n}\n\nexport function asObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    if (__DEV__ && options && isObservableObject(target)) {\n        die(`Options can't be provided for already observable objects.`)\n    }\n\n    if (hasProp(target, $mobx)) {\n        if (__DEV__ && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n            die(\n                `Cannot convert '${getDebugName(target)}' into observable object:` +\n                    `\\nThe target is already observable of different type.` +\n                    `\\nExtending builtins is not supported.`\n            )\n        }\n        return target\n    }\n\n    if (__DEV__ && !Object.isExtensible(target)) {\n        die(\"Cannot make the designated object observable; it is not extensible\")\n    }\n\n    const name =\n        options?.name ??\n        (__DEV__\n            ? `${\n                  isPlainObject(target) ? \"ObservableObject\" : target.constructor.name\n              }@${getNextId()}`\n            : \"ObservableObject\")\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        String(name),\n        getAnnotationFromOptions(options)\n    )\n\n    addHiddenProp(target, $mobx, adm)\n\n    return target\n}\n\nconst isObservableObjectAdministration = createInstanceofPredicate(\n    \"ObservableObjectAdministration\",\n    ObservableObjectAdministration\n)\n\nfunction getCachedObservablePropDescriptor(key) {\n    return (\n        descriptorCache[key] ||\n        (descriptorCache[key] = {\n            get() {\n                return this[$mobx].getObservablePropValue_(key)\n            },\n            set(value) {\n                return this[$mobx].setObservablePropValue_(key, value)\n            }\n        })\n    )\n}\n\nexport function isObservableObject(thing: any): boolean {\n    if (isObject(thing)) {\n        return isObservableObjectAdministration((thing as any)[$mobx])\n    }\n    return false\n}\n\nexport function recordAnnotationApplied(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    if (__DEV__) {\n        adm.appliedAnnotations_![key] = annotation\n    }\n    // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n    delete adm.target_[storedAnnotationsSymbol]?.[key]\n}\n\nfunction assertAnnotable(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    // Valid annotation\n    if (__DEV__ && !isAnnotation(annotation)) {\n        die(`Cannot annotate '${adm.name_}.${key.toString()}': Invalid annotation.`)\n    }\n\n    /*\n    // Configurable, not sealed, not frozen\n    // Possibly not needed, just a little better error then the one thrown by engine.\n    // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\n    if (__DEV__) {\n        const configurable = getDescriptor(adm.target_, key)?.configurable\n        const frozen = Object.isFrozen(adm.target_)\n        const sealed = Object.isSealed(adm.target_)\n        if (!configurable || frozen || sealed) {\n            const fieldName = `${adm.name_}.${key.toString()}`\n            const requestedAnnotationType = annotation.annotationType_\n            let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\n            if (frozen) {\n                error += `\\nObject is frozen.`\n            }\n            if (sealed) {\n                error += `\\nObject is sealed.`\n            }\n            if (!configurable) {\n                error += `\\nproperty is not configurable.`\n                // Mention only if caused by us to avoid confusion\n                if (hasProp(adm.appliedAnnotations!, key)) {\n                    error += `\\nTo prevent accidental re-definition of a field by a subclass, `\n                    error += `all annotated fields of non-plain objects (classes) are not configurable.`\n                }\n            }\n            die(error)\n        }\n    }\n    */\n\n    // Not annotated\n    if (__DEV__ && !isOverride(annotation) && hasProp(adm.appliedAnnotations_!, key)) {\n        const fieldName = `${adm.name_}.${key.toString()}`\n        const currentAnnotationType = adm.appliedAnnotations_![key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already annotated with '${currentAnnotationType}'.` +\n                `\\nRe-annotating fields is not allowed.` +\n                `\\nUse 'override' annotation for methods overridden by subclass.`\n        )\n    }\n}\n","import {\n    getNextId,\n    addHiddenFinalProp,\n    makeIterable,\n    addHiddenProp,\n    ObservableArrayAdministration,\n    $mobx,\n    arrayExtensions,\n    IEnhancer,\n    isObservableArray,\n    IObservableArray,\n    defineProperty,\n    initObservable\n} from \"../internal\"\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nconst ENTRY_0 = createArrayEntryDescriptor(0)\n\nconst safariPrototypeSetterInheritanceBug = (() => {\n    let v = false\n    const p = {}\n    Object.defineProperty(p, \"0\", {\n        set: () => {\n            v = true\n        }\n    })\n    Object.create(p)[\"0\"] = 1\n    return v === false\n})()\n\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nlet OBSERVABLE_ARRAY_BUFFER_SIZE = 0\n\n// Typescript workaround to make sure ObservableArray extends Array\nclass StubArray {}\nfunction inherit(ctor, proto) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(ctor.prototype, proto)\n    } else if (ctor.prototype.__proto__ !== undefined) {\n        ctor.prototype.__proto__ = proto\n    } else {\n        ctor.prototype = proto\n    }\n}\ninherit(StubArray, Array.prototype)\n\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nexport class LegacyObservableArray<T> extends StubArray {\n    constructor(\n        initialValues: T[] | undefined,\n        enhancer: IEnhancer<T>,\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        owned = false\n    ) {\n        super()\n        initObservable(() => {\n            const adm = new ObservableArrayAdministration(name, enhancer, owned, true)\n            adm.proxy_ = this as any\n            addHiddenFinalProp(this, $mobx, adm)\n\n            if (initialValues && initialValues.length) {\n                // @ts-ignore\n                this.spliceWithArray(0, 0, initialValues)\n            }\n\n            if (safariPrototypeSetterInheritanceBug) {\n                // Seems that Safari won't use numeric prototype setter untill any * numeric property is\n                // defined on the instance. After that it works fine, even if this property is deleted.\n                Object.defineProperty(this, \"0\", ENTRY_0)\n            }\n        })\n    }\n\n    concat(...arrays: T[][]): T[] {\n        ;(this[$mobx] as ObservableArrayAdministration).atom_.reportObserved()\n        return Array.prototype.concat.apply(\n            (this as any).slice(),\n            //@ts-ignore\n            arrays.map(a => (isObservableArray(a) ? a.slice() : a))\n        )\n    }\n\n    get length(): number {\n        return (this[$mobx] as ObservableArrayAdministration).getArrayLength_()\n    }\n\n    set length(newLength: number) {\n        ;(this[$mobx] as ObservableArrayAdministration).setArrayLength_(newLength)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Array\"\n    }\n\n    [Symbol.iterator]() {\n        const self = this\n        let nextIndex = 0\n        return makeIterable({\n            next() {\n                return nextIndex < self.length\n                    ? { value: self[nextIndex++], done: false }\n                    : { done: true, value: undefined }\n            }\n        })\n    }\n}\n\nObject.entries(arrayExtensions).forEach(([prop, fn]) => {\n    if (prop !== \"concat\") {\n        addHiddenProp(LegacyObservableArray.prototype, prop, fn)\n    }\n})\n\nfunction createArrayEntryDescriptor(index: number) {\n    return {\n        enumerable: false,\n        configurable: true,\n        get: function () {\n            return this[$mobx].get_(index)\n        },\n        set: function (value) {\n            this[$mobx].set_(index, value)\n        }\n    }\n}\n\nfunction createArrayBufferItem(index: number) {\n    defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index))\n}\n\nexport function reserveArrayBuffer(max: number) {\n    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n        for (let index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n            createArrayBufferItem(index)\n        }\n        OBSERVABLE_ARRAY_BUFFER_SIZE = max\n    }\n}\n\nreserveArrayBuffer(1000)\n\nexport function createLegacyArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name?: string\n): IObservableArray<T> {\n    return new LegacyObservableArray(initialValues, enhancer, name) as any\n}\n","import { isAction } from \"../api/action\"\nimport {\n    $mobx,\n    IDepTreeNode,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    isObservableSet,\n    die,\n    isFunction,\n    allowStateChangesStart,\n    untrackedStart,\n    allowStateChangesEnd,\n    untrackedEnd,\n    startBatch,\n    endBatch\n} from \"../internal\"\n\nexport function getAtom(thing: any, property?: PropertyKey): IDepTreeNode {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            if (property !== undefined) {\n                die(23)\n            }\n            return (thing as any)[$mobx].atom_\n        }\n        if (isObservableSet(thing)) {\n            return thing.atom_\n        }\n        if (isObservableMap(thing)) {\n            if (property === undefined) {\n                return thing.keysAtom_\n            }\n            const observable = thing.data_.get(property) || thing.hasMap_.get(property)\n            if (!observable) {\n                die(25, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (property && !thing[$mobx]) {\n            thing[property]\n        } // See #1072\n        if (isObservableObject(thing)) {\n            if (!property) {\n                return die(26)\n            }\n            const observable = (thing as any)[$mobx].values_.get(property)\n            if (!observable) {\n                die(27, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing\n        }\n    } else if (isFunction(thing)) {\n        if (isReaction(thing[$mobx])) {\n            // disposer function\n            return thing[$mobx]\n        }\n    }\n    die(28)\n}\n\nexport function getAdministration(thing: any, property?: string) {\n    if (!thing) {\n        die(29)\n    }\n    if (property !== undefined) {\n        return getAdministration(getAtom(thing, property))\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n        return thing\n    }\n    if (isObservableMap(thing) || isObservableSet(thing)) {\n        return thing\n    }\n    if (thing[$mobx]) {\n        return thing[$mobx]\n    }\n    die(24, thing)\n}\n\nexport function getDebugName(thing: any, property?: string): string {\n    let named\n    if (property !== undefined) {\n        named = getAtom(thing, property)\n    } else if (isAction(thing)) {\n        return thing.name\n    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n        named = getAdministration(thing)\n    } else {\n        // valid for arrays as well\n        named = getAtom(thing)\n    }\n    return named.name_\n}\n\n/**\n * Helper function for initializing observable structures, it applies:\n * 1. allowStateChanges so we don't violate enforceActions.\n * 2. untracked so we don't accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.\n * 3. batch to avoid state version updates\n */\nexport function initObservable<T>(cb: () => T): T {\n    const derivation = untrackedStart()\n    const allowStateChanges = allowStateChangesStart(true)\n    startBatch()\n    try {\n        return cb()\n    } finally {\n        endBatch()\n        allowStateChangesEnd(allowStateChanges)\n        untrackedEnd(derivation)\n    }\n}\n","import {\n    isES6Map,\n    isObservableArray,\n    isObservableMap,\n    isES6Set,\n    isObservableSet,\n    hasProp,\n    isFunction,\n    objectPrototype\n} from \"../internal\"\n\ndeclare const Symbol\nconst toString = objectPrototype.toString\n\nexport function deepEqual(a: any, b: any, depth: number = -1): boolean {\n    return eq(a, b, depth)\n}\n\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a: any, b: any, depth: number, aStack?: any[], bStack?: any[]) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) {\n        return a !== 0 || 1 / a === 1 / b\n    }\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) {\n        return false\n    }\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) {\n        return b !== b\n    }\n    // Exhaust primitive checks\n    const type = typeof a\n    if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") {\n        return false\n    }\n\n    // Compare `[[Class]]` names.\n    const className = toString.call(a)\n    if (className !== toString.call(b)) {\n        return false\n    }\n    switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case \"[object RegExp]\":\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case \"[object String]\":\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return \"\" + a === \"\" + b\n        case \"[object Number]\":\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN.\n            if (+a !== +a) {\n                return +b !== +b\n            }\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b\n        case \"[object Date]\":\n        case \"[object Boolean]\":\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b\n        case \"[object Symbol]\":\n            return (\n                typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b)\n            )\n        case \"[object Map]\":\n        case \"[object Set]\":\n            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n            // Hide this extra level by increasing the depth.\n            if (depth >= 0) {\n                depth++\n            }\n            break\n    }\n    // Unwrap any wrapped objects.\n    a = unwrap(a)\n    b = unwrap(b)\n\n    const areArrays = className === \"[object Array]\"\n    if (!areArrays) {\n        if (typeof a != \"object\" || typeof b != \"object\") {\n            return false\n        }\n\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        const aCtor = a.constructor,\n            bCtor = b.constructor\n        if (\n            aCtor !== bCtor &&\n            !(\n                isFunction(aCtor) &&\n                aCtor instanceof aCtor &&\n                isFunction(bCtor) &&\n                bCtor instanceof bCtor\n            ) &&\n            \"constructor\" in a &&\n            \"constructor\" in b\n        ) {\n            return false\n        }\n    }\n\n    if (depth === 0) {\n        return false\n    } else if (depth < 0) {\n        depth = -1\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || []\n    bStack = bStack || []\n    let length = aStack.length\n    while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) {\n            return bStack[length] === b\n        }\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a)\n    bStack.push(b)\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length\n        if (length !== b.length) {\n            return false\n        }\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n            if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n                return false\n            }\n        }\n    } else {\n        // Deep compare objects.\n        const keys = Object.keys(a)\n        let key\n        length = keys.length\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (Object.keys(b).length !== length) {\n            return false\n        }\n        while (length--) {\n            // Deep compare each member\n            key = keys[length]\n            if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n                return false\n            }\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop()\n    bStack.pop()\n    return true\n}\n\nfunction unwrap(a: any) {\n    if (isObservableArray(a)) {\n        return a.slice()\n    }\n    if (isES6Map(a) || isObservableMap(a)) {\n        return Array.from(a.entries())\n    }\n    if (isES6Set(a) || isObservableSet(a)) {\n        return Array.from(a.entries())\n    }\n    return a\n}\n","export function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T> {\n    iterator[Symbol.iterator] = getSelf\n    return iterator as any\n}\n\nfunction getSelf() {\n    return this\n}\n","import { deepEqual } from \"../internal\"\n\nexport interface IEqualsComparer<T> {\n    (a: T, b: T): boolean\n}\n\nfunction identityComparer(a: any, b: any): boolean {\n    return a === b\n}\n\nfunction structuralComparer(a: any, b: any): boolean {\n    return deepEqual(a, b)\n}\n\nfunction shallowComparer(a: any, b: any): boolean {\n    return deepEqual(a, b, 1)\n}\n\nfunction defaultComparer(a: any, b: any): boolean {\n    if (Object.is) {\n        return Object.is(a, b)\n    }\n\n    return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b\n}\n\nexport const comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    default: defaultComparer,\n    shallow: shallowComparer\n}\n","import {\n    ComputedValue,\n    IComputedValueOptions,\n    Annotation,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    isStringish,\n    isPlainObject,\n    isFunction,\n    die,\n    IComputedValue,\n    createComputedAnnotation,\n    comparer,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassGetterDecorator } from \"../types/decorator_fills\"\n\nexport const COMPUTED = \"computed\"\nexport const COMPUTED_STRUCT = \"computed.struct\"\n\nexport interface IComputedFactory extends Annotation, PropertyDecorator, ClassGetterDecorator {\n    // @computed(opts)\n    <T>(options: IComputedValueOptions<T>): Annotation & PropertyDecorator & ClassGetterDecorator\n    // computed(fn, opts)\n    <T>(func: () => T, options?: IComputedValueOptions<T>): IComputedValue<T>\n\n    struct: Annotation & PropertyDecorator & ClassGetterDecorator\n}\n\nconst computedAnnotation = createComputedAnnotation(COMPUTED)\nconst computedStructAnnotation = createComputedAnnotation(COMPUTED_STRUCT, {\n    equals: comparer.structural\n})\n\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nexport const computed: IComputedFactory = function computed(arg1, arg2) {\n    if (is20223Decorator(arg2)) {\n        // @computed (2022.3 Decorators)\n        return computedAnnotation.decorate_20223_(arg1, arg2)\n    }\n    if (isStringish(arg2)) {\n        // @computed\n        return storeAnnotation(arg1, arg2, computedAnnotation)\n    }\n    if (isPlainObject(arg1)) {\n        // @computed({ options })\n        return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1))\n    }\n\n    // computed(expr, options?)\n    if (__DEV__) {\n        if (!isFunction(arg1)) {\n            die(\"First argument to `computed` should be an expression.\")\n        }\n        if (isFunction(arg2)) {\n            die(\n                \"A setter as second argument is no longer supported, use `{ set: fn }` option instead\"\n            )\n        }\n    }\n    const opts: IComputedValueOptions<any> = isPlainObject(arg2) ? arg2 : {}\n    opts.get = arg1\n    opts.name ||= arg1.name || \"\" /* for generated name */\n\n    return new ComputedValue(opts)\n} as any\n\nObject.assign(computed, computedAnnotation)\n\ncomputed.struct = createDecoratorAnnotation(computedStructAnnotation)\n","import {\n    Atom,\n    IEnhancer,\n    IInterceptable,\n    IEqualsComparer,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    checkIfStateModificationsAreAllowed,\n    comparer,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    toPrimitive,\n    globalState,\n    IUNCHANGED,\n    UPDATE\n} from \"../internal\"\n\nexport interface IValueWillChange<T> {\n    object: IObservableValue<T>\n    type: \"update\"\n    newValue: T\n}\n\nexport type IValueDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"value\"\n    object: IObservableValue<T>\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\nexport type IBoxDidChange<T = any> =\n    | {\n          type: \"create\"\n          observableKind: \"value\"\n          object: IObservableValue<T>\n          debugObjectName: string\n          newValue: T\n      }\n    | IValueDidChange<T>\n\nexport interface IObservableValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nconst CREATE = \"create\"\n\nexport class ObservableValue<T>\n    extends Atom\n    implements IObservableValue<T>, IInterceptable<IValueWillChange<T>>, IListenable\n{\n    hasUnreportedChange_ = false\n    interceptors_\n    changeListeners_\n    value_\n    dehancer: any\n\n    constructor(\n        value: T,\n        public enhancer: IEnhancer<T>,\n        public name_ = __DEV__ ? \"ObservableValue@\" + getNextId() : \"ObservableValue\",\n        notifySpy = true,\n        private equals: IEqualsComparer<any> = comparer.default\n    ) {\n        super(name_)\n        this.value_ = enhancer(value, undefined, name_)\n        if (__DEV__ && notifySpy && isSpyEnabled()) {\n            // only notify spy if this is a stand-alone observable\n            spyReport({\n                type: CREATE,\n                object: this,\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                newValue: \"\" + this.value_\n            })\n        }\n    }\n\n    private dehanceValue(value: T): T {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    public set(newValue: T) {\n        const oldValue = this.value_\n        newValue = this.prepareNewValue_(newValue) as any\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            if (__DEV__ && notifySpy) {\n                spyReportStart({\n                    type: UPDATE,\n                    object: this,\n                    observableKind: \"value\",\n                    debugObjectName: this.name_,\n                    newValue,\n                    oldValue\n                })\n            }\n            this.setNewValue_(newValue)\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private prepareNewValue_(newValue): T | IUNCHANGED {\n        checkIfStateModificationsAreAllowed(this)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IValueWillChange<T>>(this, {\n                object: this,\n                type: UPDATE,\n                newValue\n            })\n            if (!change) {\n                return globalState.UNCHANGED\n            }\n            newValue = change.newValue\n        }\n        // apply modifier\n        newValue = this.enhancer(newValue, this.value_, this.name_)\n        return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue\n    }\n\n    setNewValue_(newValue: T) {\n        const oldValue = this.value_\n        this.value_ = newValue\n        this.reportChanged()\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: UPDATE,\n                object: this,\n                newValue,\n                oldValue\n            })\n        }\n    }\n\n    public get(): T {\n        this.reportObserved()\n        return this.dehanceValue(this.value_)\n    }\n\n    intercept_(handler: IInterceptor<IValueWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    observe_(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        if (fireImmediately) {\n            listener({\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                object: this,\n                type: UPDATE,\n                newValue: this.value_,\n                oldValue: undefined\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    raw() {\n        // used by MST ot get undehanced value\n        return this.value_\n    }\n\n    toJSON() {\n        return this.get()\n    }\n\n    toString() {\n        return `${this.name_}[${this.value_}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue) as (\n    x: any\n) => x is IObservableValue<any>\n","import {\n    CaughtException,\n    IDerivation,\n    IDerivationState_,\n    IEqualsComparer,\n    IObservable,\n    Lambda,\n    TraceMode,\n    autorun,\n    clearObserving,\n    comparer,\n    createAction,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    propagateChangeConfirmed,\n    propagateMaybeChanged,\n    reportObserved,\n    shouldCompute,\n    spyReport,\n    startBatch,\n    toPrimitive,\n    trackDerivedFunction,\n    untrackedEnd,\n    untrackedStart,\n    UPDATE,\n    die,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nexport interface IComputedValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nexport interface IComputedValueOptions<T> {\n    get?: () => T\n    set?: (value: T) => void\n    name?: string\n    equals?: IEqualsComparer<T>\n    context?: any\n    requiresReaction?: boolean\n    keepAlive?: boolean\n}\n\nexport type IComputedDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"computed\"\n    object: unknown\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\n\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it's being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it's being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\n */\nexport class ComputedValue<T> implements IObservable, IComputedValue<T>, IDerivation {\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_ = null // during tracking it's an array with new observed observers\n    isBeingObserved_ = false\n    isPendingUnobservation_: boolean = false\n    observers_ = new Set<IDerivation>()\n    diffValue_ = 0\n    runId_ = 0\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    unboundDepsCount_ = 0\n    protected value_: T | undefined | CaughtException = new CaughtException(null)\n    name_: string\n    triggeredBy_?: string\n    isComputing_: boolean = false // to check for cycles\n    isRunningSetter_: boolean = false\n    derivation: () => T // N.B: unminified as it is used by MST\n    setter_?: (value: T) => void\n    isTracing_: TraceMode = TraceMode.NONE\n    scope_: Object | undefined\n    private equals_: IEqualsComparer<any>\n    private requiresReaction_: boolean | undefined\n    keepAlive_: boolean\n\n    /**\n     * Create a new computed value based on a function expression.\n     *\n     * The `name` property is for debug purposes only.\n     *\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n     * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\n     * Structural comparison can be convenient if you always produce a new aggregated object and\n     * don't want to notify observers if it is structurally the same.\n     * This is useful for working with vectors, mouse coordinates etc.\n     */\n    constructor(options: IComputedValueOptions<T>) {\n        if (!options.get) {\n            die(31)\n        }\n        this.derivation = options.get!\n        this.name_ = options.name || (__DEV__ ? \"ComputedValue@\" + getNextId() : \"ComputedValue\")\n        if (options.set) {\n            this.setter_ = createAction(\n                __DEV__ ? this.name_ + \"-setter\" : \"ComputedValue-setter\",\n                options.set\n            ) as any\n        }\n        this.equals_ =\n            options.equals ||\n            ((options as any).compareStructural || (options as any).struct\n                ? comparer.structural\n                : comparer.default)\n        this.scope_ = options.context\n        this.requiresReaction_ = options.requiresReaction\n        this.keepAlive_ = !!options.keepAlive\n    }\n\n    onBecomeStale_() {\n        propagateMaybeChanged(this)\n    }\n\n    public onBOL: Set<Lambda> | undefined\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Returns the current value of this computed value.\n     * Will evaluate its computation first if needed.\n     */\n    public get(): T {\n        if (this.isComputing_) {\n            die(32, this.name_, this.derivation)\n        }\n        if (\n            globalState.inBatch === 0 &&\n            // !globalState.trackingDerivatpion &&\n            this.observers_.size === 0 &&\n            !this.keepAlive_\n        ) {\n            if (shouldCompute(this)) {\n                this.warnAboutUntrackedRead_()\n                startBatch() // See perf test 'computed memoization'\n                this.value_ = this.computeValue_(false)\n                endBatch()\n            }\n        } else {\n            reportObserved(this)\n            if (shouldCompute(this)) {\n                let prevTrackingContext = globalState.trackingContext\n                if (this.keepAlive_ && !prevTrackingContext) {\n                    globalState.trackingContext = this\n                }\n                if (this.trackAndCompute()) {\n                    propagateChangeConfirmed(this)\n                }\n                globalState.trackingContext = prevTrackingContext\n            }\n        }\n        const result = this.value_!\n\n        if (isCaughtException(result)) {\n            throw result.cause\n        }\n        return result\n    }\n\n    public set(value: T) {\n        if (this.setter_) {\n            if (this.isRunningSetter_) {\n                die(33, this.name_)\n            }\n            this.isRunningSetter_ = true\n            try {\n                this.setter_.call(this.scope_, value)\n            } finally {\n                this.isRunningSetter_ = false\n            }\n        } else {\n            die(34, this.name_)\n        }\n    }\n\n    trackAndCompute(): boolean {\n        // N.B: unminified as it is used by MST\n        const oldValue = this.value_\n        const wasSuspended =\n            /* see #1208 */ this.dependenciesState_ === IDerivationState_.NOT_TRACKING_\n        const newValue = this.computeValue_(true)\n\n        const changed =\n            wasSuspended ||\n            isCaughtException(oldValue) ||\n            isCaughtException(newValue) ||\n            !this.equals_(oldValue, newValue)\n\n        if (changed) {\n            this.value_ = newValue\n\n            if (__DEV__ && isSpyEnabled()) {\n                spyReport({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    object: this.scope_,\n                    type: \"update\",\n                    oldValue,\n                    newValue\n                } as IComputedDidChange)\n            }\n        }\n\n        return changed\n    }\n\n    computeValue_(track: boolean) {\n        this.isComputing_ = true\n        // don't allow state changes during computation\n        const prev = allowStateChangesStart(false)\n        let res: T | CaughtException\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope_)\n        } else {\n            if (globalState.disableErrorBoundaries === true) {\n                res = this.derivation.call(this.scope_)\n            } else {\n                try {\n                    res = this.derivation.call(this.scope_)\n                } catch (e) {\n                    res = new CaughtException(e)\n                }\n            }\n        }\n        allowStateChangesEnd(prev)\n        this.isComputing_ = false\n        return res\n    }\n\n    suspend_() {\n        if (!this.keepAlive_) {\n            clearObserving(this)\n            this.value_ = undefined // don't hold on to computed value!\n            if (__DEV__ && this.isTracing_ !== TraceMode.NONE) {\n                console.log(\n                    `[mobx.trace] Computed value '${this.name_}' was suspended and it will recompute on the next access.`\n                )\n            }\n        }\n    }\n\n    observe_(listener: (change: IComputedDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        let firstTime = true\n        let prevValue: T | undefined = undefined\n        return autorun(() => {\n            // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n            let newValue = this.get()\n            if (!firstTime || fireImmediately) {\n                const prevU = untrackedStart()\n                listener({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    type: UPDATE,\n                    object: this,\n                    newValue,\n                    oldValue: prevValue\n                })\n                untrackedEnd(prevU)\n            }\n            firstTime = false\n            prevValue = newValue\n        })\n    }\n\n    warnAboutUntrackedRead_() {\n        if (!__DEV__) {\n            return\n        }\n        if (this.isTracing_ !== TraceMode.NONE) {\n            console.log(\n                `[mobx.trace] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n        if (\n            typeof this.requiresReaction_ === \"boolean\"\n                ? this.requiresReaction_\n                : globalState.computedRequiresReaction\n        ) {\n            console.warn(\n                `[mobx] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n    }\n\n    toString() {\n        return `${this.name_}[${this.derivation.toString()}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue)\n","import {\n    $mobx,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    checkIfStateModificationsAreAllowed,\n    createAtom,\n    createInstanceofPredicate,\n    deepEnhancer,\n    getNextId,\n    getPlainObjectKeys,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isES6Map,\n    isPlainObject,\n    isSpyEnabled,\n    makeIterable,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    stringifyKey,\n    transaction,\n    untracked,\n    onBecomeUnobserved,\n    globalState,\n    die,\n    isFunction,\n    UPDATE,\n    IAtom,\n    PureSpyEvent,\n    initObservable\n} from \"../internal\"\n\nexport interface IKeyValueMap<V = any> {\n    [key: string]: V\n}\n\nexport type IMapEntry<K = any, V = any> = [K, V]\nexport type IReadonlyMapEntry<K = any, V = any> = readonly [K, V]\nexport type IMapEntries<K = any, V = any> = IMapEntry<K, V>[]\nexport type IReadonlyMapEntries<K = any, V = any> = IReadonlyMapEntry<K, V>[]\n\nexport type IMapDidChange<K = any, V = any> = { observableKind: \"map\"; debugObjectName: string } & (\n    | {\n          object: ObservableMap<K, V>\n          name: K // actual the key or index, but this is based on the ancient .observe proposal for consistency\n          type: \"update\"\n          newValue: V\n          oldValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"add\"\n          newValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"delete\"\n          oldValue: V\n      }\n)\n\nexport interface IMapWillChange<K = any, V = any> {\n    object: ObservableMap<K, V>\n    type: \"update\" | \"add\" | \"delete\"\n    name: K\n    newValue?: V\n}\n\nconst ObservableMapMarker = {}\n\nexport const ADD = \"add\"\nexport const DELETE = \"delete\"\n\nexport type IObservableMapInitialValues<K = any, V = any> =\n    | IMapEntries<K, V>\n    | IReadonlyMapEntries<K, V>\n    | IKeyValueMap<V>\n    | Map<K, V>\n\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\nexport class ObservableMap<K = any, V = any>\n    implements Map<K, V>, IInterceptable<IMapWillChange<K, V>>, IListenable\n{\n    [$mobx] = ObservableMapMarker\n    data_!: Map<K, ObservableValue<V>>\n    hasMap_!: Map<K, ObservableValue<boolean>> // hasMap, not hashMap >-).\n    keysAtom_!: IAtom\n    interceptors_\n    changeListeners_\n    dehancer: any\n\n    constructor(\n        initialData?: IObservableMapInitialValues<K, V>,\n        public enhancer_: IEnhancer<V> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableMap@\" + getNextId() : \"ObservableMap\"\n    ) {\n        if (!isFunction(Map)) {\n            die(18)\n        }\n        initObservable(() => {\n            this.keysAtom_ = createAtom(__DEV__ ? `${this.name_}.keys()` : \"ObservableMap.keys()\")\n            this.data_ = new Map()\n            this.hasMap_ = new Map()\n            if (initialData) {\n                this.merge(initialData)\n            }\n        })\n    }\n\n    private has_(key: K): boolean {\n        return this.data_.has(key)\n    }\n\n    has(key: K): boolean {\n        if (!globalState.trackingDerivation) {\n            return this.has_(key)\n        }\n\n        let entry = this.hasMap_.get(key)\n        if (!entry) {\n            const newEntry = (entry = new ObservableValue(\n                this.has_(key),\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableMap.key?\",\n                false\n            ))\n            this.hasMap_.set(key, newEntry)\n            onBecomeUnobserved(newEntry, () => this.hasMap_.delete(key))\n        }\n\n        return entry.get()\n    }\n\n    set(key: K, value: V) {\n        const hasKey = this.has_(key)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: hasKey ? UPDATE : ADD,\n                object: this,\n                newValue: value,\n                name: key\n            })\n            if (!change) {\n                return this\n            }\n            value = change.newValue!\n        }\n        if (hasKey) {\n            this.updateValue_(key, value)\n        } else {\n            this.addValue_(key, value)\n        }\n        return this\n    }\n\n    delete(key: K): boolean {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: DELETE,\n                object: this,\n                name: key\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has_(key)) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: (<any>this.data_.get(key)).value_,\n                          name: key\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            transaction(() => {\n                this.keysAtom_.reportChanged()\n                this.hasMap_.get(key)?.setNewValue_(false)\n                const observable = this.data_.get(key)!\n                observable.setNewValue_(undefined as any)\n                this.data_.delete(key)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    private updateValue_(key: K, newValue: V | undefined) {\n        const observable = this.data_.get(key)!\n        newValue = (observable as any).prepareNewValue_(newValue) as V\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: UPDATE,\n                          object: this,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            observable.setNewValue_(newValue as V)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private addValue_(key: K, newValue: V) {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        transaction(() => {\n            const observable = new ObservableValue(\n                newValue,\n                this.enhancer_,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}` : \"ObservableMap.key\",\n                false\n            )\n            this.data_.set(key, observable)\n            newValue = (observable as any).value_ // value might have been changed\n            this.hasMap_.get(key)?.setNewValue_(true)\n            this.keysAtom_.reportChanged()\n        })\n        const notifySpy = isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IMapDidChange<K, V> | null =\n            notify || notifySpy\n                ? {\n                      observableKind: \"map\",\n                      debugObjectName: this.name_,\n                      type: ADD,\n                      object: this,\n                      name: key,\n                      newValue\n                  }\n                : null\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change! as PureSpyEvent)\n        } // TODO fix type\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get(key: K): V | undefined {\n        if (this.has(key)) {\n            return this.dehanceValue_(this.data_.get(key)!.get())\n        }\n        return this.dehanceValue_(undefined)\n    }\n\n    private dehanceValue_<X extends V | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    keys(): IterableIterator<K> {\n        this.keysAtom_.reportObserved()\n        return this.data_.keys()\n    }\n\n    values(): IterableIterator<V> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : self.get(value)\n                }\n            }\n        })\n    }\n\n    entries(): IterableIterator<IMapEntry<K, V>> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : ([value, self.get(value)!] as [K, V])\n                }\n            }\n        })\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    forEach(callback: (value: V, key: K, object: Map<K, V>) => void, thisArg?) {\n        for (const [key, value] of this) {\n            callback.call(thisArg, value, key, this)\n        }\n    }\n\n    /** Merge another object into this object, returns this. */\n    merge(other?: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        if (isObservableMap(other)) {\n            other = new Map(other)\n        }\n        transaction(() => {\n            if (isPlainObject(other)) {\n                getPlainObjectKeys(other).forEach((key: any) =>\n                    this.set(key as K, (other as IKeyValueMap)[key])\n                )\n            } else if (Array.isArray(other)) {\n                other.forEach(([key, value]) => this.set(key, value))\n            } else if (isES6Map(other)) {\n                if (other.constructor !== Map) {\n                    die(19, other)\n                }\n                other.forEach((value, key) => this.set(key, value))\n            } else if (other !== null && other !== undefined) {\n                die(20, other)\n            }\n        })\n        return this\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const key of this.keys()) {\n                    this.delete(key)\n                }\n            })\n        })\n    }\n\n    replace(values: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        // Implementation requirements:\n        // - respect ordering of replacement map\n        // - allow interceptors to run and potentially prevent individual operations\n        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n        // - note that result map may differ from replacement map due to the interceptors\n        transaction(() => {\n            // Convert to map so we can do quick key lookups\n            const replacementMap = convertToMap(values)\n            const orderedData = new Map()\n            // Used for optimization\n            let keysReportChangedCalled = false\n            // Delete keys that don't exist in replacement map\n            // if the key deletion is prevented by interceptor\n            // add entry at the beginning of the result map\n            for (const key of this.data_.keys()) {\n                // Concurrently iterating/deleting keys\n                // iterator should handle this correctly\n                if (!replacementMap.has(key)) {\n                    const deleted = this.delete(key)\n                    // Was the key removed?\n                    if (deleted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    } else {\n                        // Delete prevented by interceptor\n                        const value = this.data_.get(key)\n                        orderedData.set(key, value)\n                    }\n                }\n            }\n            // Merge entries\n            for (const [key, value] of replacementMap.entries()) {\n                // We will want to know whether a new key is added\n                const keyExisted = this.data_.has(key)\n                // Add or update value\n                this.set(key, value)\n                // The addition could have been prevent by interceptor\n                if (this.data_.has(key)) {\n                    // The update could have been prevented by interceptor\n                    // and also we want to preserve existing values\n                    // so use value from _data map (instead of replacement map)\n                    const value = this.data_.get(key)\n                    orderedData.set(key, value)\n                    // Was a new key added?\n                    if (!keyExisted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    }\n                }\n            }\n            // Check for possible key order change\n            if (!keysReportChangedCalled) {\n                if (this.data_.size !== orderedData.size) {\n                    // If size differs, keys are definitely modified\n                    this.keysAtom_.reportChanged()\n                } else {\n                    const iter1 = this.data_.keys()\n                    const iter2 = orderedData.keys()\n                    let next1 = iter1.next()\n                    let next2 = iter2.next()\n                    while (!next1.done) {\n                        if (next1.value !== next2.value) {\n                            this.keysAtom_.reportChanged()\n                            break\n                        }\n                        next1 = iter1.next()\n                        next2 = iter2.next()\n                    }\n                }\n            }\n            // Use correctly ordered map\n            this.data_ = orderedData\n        })\n        return this\n    }\n\n    get size(): number {\n        this.keysAtom_.reportObserved()\n        return this.data_.size\n    }\n\n    toString(): string {\n        return \"[object ObservableMap]\"\n    }\n\n    toJSON(): [K, V][] {\n        return Array.from(this)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Map\"\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(listener: (changes: IMapDidChange<K, V>) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with maps.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<IMapWillChange<K, V>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap) as (\n    thing: any\n) => thing is ObservableMap<any, any>\n\nfunction convertToMap(dataStructure: any): Map<any, any> {\n    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n        return dataStructure\n    } else if (Array.isArray(dataStructure)) {\n        return new Map(dataStructure)\n    } else if (isPlainObject(dataStructure)) {\n        const map = new Map()\n        for (const key in dataStructure) {\n            map.set(key, dataStructure[key])\n        }\n        return map\n    } else {\n        return die(21, dataStructure)\n    }\n}\n","import {\n    $mobx,\n    createAtom,\n    deepEnhancer,\n    getNextId,\n    IEnhancer,\n    isSpyEnabled,\n    hasListeners,\n    IListenable,\n    registerListener,\n    Lambda,\n    spyReportStart,\n    notifyListeners,\n    spyReportEnd,\n    createInstanceofPredicate,\n    hasInterceptors,\n    interceptChange,\n    IInterceptable,\n    IInterceptor,\n    registerInterceptor,\n    checkIfStateModificationsAreAllowed,\n    untracked,\n    makeIterable,\n    transaction,\n    isES6Set,\n    IAtom,\n    DELETE,\n    ADD,\n    die,\n    isFunction,\n    initObservable\n} from \"../internal\"\n\nconst ObservableSetMarker = {}\n\nexport type IObservableSetInitialValues<T> = Set<T> | readonly T[]\n\nexport type ISetDidChange<T = any> =\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"add\"\n          newValue: T\n      }\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"delete\"\n          oldValue: T\n      }\n\nexport type ISetWillChange<T = any> =\n    | {\n          type: \"delete\"\n          object: ObservableSet<T>\n          oldValue: T\n      }\n    | {\n          type: \"add\"\n          object: ObservableSet<T>\n          newValue: T\n      }\n\nexport class ObservableSet<T = any> implements Set<T>, IInterceptable<ISetWillChange>, IListenable {\n    [$mobx] = ObservableSetMarker\n    private data_: Set<any> = new Set()\n    atom_!: IAtom\n    changeListeners_\n    interceptors_\n    dehancer: any\n    enhancer_: (newV: any, oldV: any | undefined) => any\n\n    constructor(\n        initialData?: IObservableSetInitialValues<T>,\n        enhancer: IEnhancer<T> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableSet@\" + getNextId() : \"ObservableSet\"\n    ) {\n        if (!isFunction(Set)) {\n            die(22)\n        }\n        this.enhancer_ = (newV, oldV) => enhancer(newV, oldV, name_)\n        initObservable(() => {\n            this.atom_ = createAtom(this.name_)\n            if (initialData) {\n                this.replace(initialData)\n            }\n        })\n    }\n\n    private dehanceValue_<X extends T | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const value of this.data_.values()) {\n                    this.delete(value)\n                }\n            })\n        })\n    }\n\n    forEach(callbackFn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any) {\n        for (const value of this) {\n            callbackFn.call(thisArg, value, value, this)\n        }\n    }\n\n    get size() {\n        this.atom_.reportObserved()\n        return this.data_.size\n    }\n\n    add(value: T) {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: ADD,\n                object: this,\n                newValue: value\n            })\n            if (!change) {\n                return this\n            }\n            // ideally, value = change.value would be done here, so that values can be\n            // changed by interceptor. Same applies for other Set and Map api's.\n        }\n        if (!this.has(value)) {\n            transaction(() => {\n                this.data_.add(this.enhancer_(value, undefined))\n                this.atom_.reportChanged()\n            })\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: ADD,\n                          object: this,\n                          newValue: value\n                      }\n                    : null\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n        }\n\n        return this\n    }\n\n    delete(value: T) {\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: DELETE,\n                object: this,\n                oldValue: value\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has(value)) {\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: value\n                      }\n                    : null\n\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            transaction(() => {\n                this.atom_.reportChanged()\n                this.data_.delete(value)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    has(value: T) {\n        this.atom_.reportObserved()\n        return this.data_.has(this.dehanceValue_(value))\n    }\n\n    entries() {\n        let nextIndex = 0\n        const keys = Array.from(this.keys())\n        const values = Array.from(this.values())\n        return makeIterable<[T, T]>({\n            next() {\n                const index = nextIndex\n                nextIndex += 1\n                return index < values.length\n                    ? { value: [keys[index], values[index]], done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    keys(): IterableIterator<T> {\n        return this.values()\n    }\n\n    values(): IterableIterator<T> {\n        this.atom_.reportObserved()\n        const self = this\n        let nextIndex = 0\n        const observableValues = Array.from(this.data_.values())\n        return makeIterable<T>({\n            next() {\n                return nextIndex < observableValues.length\n                    ? { value: self.dehanceValue_(observableValues[nextIndex++]), done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    replace(other: ObservableSet<T> | IObservableSetInitialValues<T>): ObservableSet<T> {\n        if (isObservableSet(other)) {\n            other = new Set(other)\n        }\n\n        transaction(() => {\n            if (Array.isArray(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (isES6Set(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (other !== null && other !== undefined) {\n                die(\"Cannot initialize set from \" + other)\n            }\n        })\n\n        return this\n    }\n    observe_(listener: (changes: ISetDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        // ... 'fireImmediately' could also be true?\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with sets.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<ISetWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    toJSON(): T[] {\n        return Array.from(this)\n    }\n\n    toString(): string {\n        return \"[object ObservableSet]\"\n    }\n\n    [Symbol.iterator]() {\n        return this.values()\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Set\"\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableSet = createInstanceofPredicate(\"ObservableSet\", ObservableSet) as (\n    thing: any\n) => thing is ObservableSet<any>\n","/**\n * (c) Michel Weststrate 2015 - 2020\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\nimport { die } from \"./errors\"\nimport { getGlobal } from \"./utils/global\"\n;[\"Symbol\", \"Map\", \"Set\"].forEach(m => {\n    let g = getGlobal()\n    if (typeof g[m] === \"undefined\") {\n        die(`MobX requires global '${m}' to be available or polyfilled`)\n    }\n})\n\nimport { spy, getDebugName, $mobx } from \"./internal\"\n\nexport {\n    IObservable,\n    IDepTreeNode,\n    Reaction,\n    IReactionPublic,\n    IReactionDisposer,\n    untracked,\n    IAtom,\n    createAtom,\n    spy,\n    IComputedValue,\n    IEqualsComparer,\n    comparer,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    IObjectWillChange,\n    IObjectDidChange,\n    isObservableObject,\n    IValueDidChange,\n    IValueWillChange,\n    IObservableValue,\n    isObservableValue as isBoxedObservable,\n    IObservableArray,\n    IArrayWillChange,\n    IArrayWillSplice,\n    IArraySplice,\n    IArrayUpdate,\n    IArrayDidChange,\n    isObservableArray,\n    IKeyValueMap,\n    ObservableMap,\n    IMapEntries,\n    IMapEntry,\n    IMapWillChange,\n    IMapDidChange,\n    isObservableMap,\n    IObservableMapInitialValues,\n    ObservableSet,\n    isObservableSet,\n    ISetDidChange,\n    ISetWillChange,\n    IObservableSetInitialValues,\n    transaction,\n    observable,\n    IObservableFactory,\n    CreateObservableOptions,\n    computed,\n    IComputedFactory,\n    isObservable,\n    isObservableProp,\n    isComputed,\n    isComputedProp,\n    extendObservable,\n    observe,\n    intercept,\n    autorun,\n    IAutorunOptions,\n    reaction,\n    IReactionOptions,\n    when,\n    IWhenOptions,\n    action,\n    isAction,\n    runInAction,\n    IActionFactory,\n    keys,\n    values,\n    entries,\n    set,\n    remove,\n    has,\n    get,\n    apiOwnKeys as ownKeys,\n    apiDefineProperty as defineProperty,\n    configure,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    flow,\n    isFlow,\n    flowResult,\n    FlowCancellationError,\n    isFlowCancellationError,\n    toJS,\n    trace,\n    IObserverTree,\n    IDependencyTree,\n    getDependencyTree,\n    getObserverTree,\n    resetGlobalState as _resetGlobalState,\n    getGlobalState as _getGlobalState,\n    getDebugName,\n    getAtom,\n    getAdministration as _getAdministration,\n    allowStateChanges as _allowStateChanges,\n    runInAction as _allowStateChangesInsideComputed, // This has become the default behavior in Mobx 6\n    Lambda,\n    $mobx,\n    isComputingDerivation as _isComputingDerivation,\n    onReactionError,\n    interceptReads as _interceptReads,\n    IComputedValueOptions,\n    IActionRunInfo,\n    _startAction,\n    _endAction,\n    allowStateReadsStart as _allowStateReadsStart,\n    allowStateReadsEnd as _allowStateReadsEnd,\n    makeObservable,\n    makeAutoObservable,\n    autoAction as _autoAction,\n    AnnotationsMap,\n    AnnotationMapEntry,\n    override\n} from \"./internal\"\n\n// Devtools support\ndeclare const __MOBX_DEVTOOLS_GLOBAL_HOOK__: { injectMobx: (any) => void }\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    // See: https://github.com/andykog/mobx-devtools/\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n        spy,\n        extras: {\n            getDebugName\n        },\n        $mobx\n    })\n}\n"],"names":["die","error","args","Array","_len","_key","arguments","Error","length","map","String","join","getGlobal","globalThis","window","global","self","mockGlobal","assertProxies","hasProxy","once","func","invoked","apply","this","isFunction","fn","isStringish","value","isObject","isPlainObject","proto","Object","getPrototypeOf","protoConstructor","hasOwnProperty","call","constructor","toString","plainObjectString","isGenerator","obj","name","displayName","addHiddenProp","object","propName","defineProperty","enumerable","writable","configurable","addHiddenFinalProp","createInstanceofPredicate","theClass","prototype","x","isES6Map","thing","Map","isES6Set","Set","toPrimitive","hasProp","target","prop","objectPrototype","createDecoratorAnnotation","annotation","assign","property","is20223Decorator","decorate_20223_","storeAnnotation","key","storedAnnotationsSymbol","_extends","annotationType_","context","kind","createAtom","onBecomeObservedHandler","onBecomeUnobservedHandler","noop","atom","Atom","onBecomeObserved","onBecomeUnobserved","deepEnhancer","v","_","isObservable","isArray","observable","array","set","isAction","isFlow","flow","autoAction","referenceEnhancer","newValue","createActionAnnotation","options","options_","make_","extend_","adm","descriptor","source","_this$options_","bound","target_","actionDescriptor","createActionDescriptor","proxyTrap","defineProperty_","mthd","addInitializer","ann","_this$options_2","m","_ann$options_$name","_ann$options_","_ann$options_$autoAct","_ann$options_2","createAction","bind","isMobxAction","safeDescriptors","globalState","_adm$proxy_","_annotation$options_","proxy_","_annotation$options_$","_annotation$options_2","_annotation$options_$2","_annotation$options_3","_annotation$options_4","_adm$proxy_2","isPlainObject_","createFlowAnnotation","flowDescriptor","createFlowDescriptor","_this$options_3","isMobXFlow","createComputedAnnotation","defineComputedProperty_","get","asObservableObject","$mobx","values_","ComputedValue","getObservablePropValue_","createObservableAnnotation","defineObservableProperty_","_this$options_$enhanc","enhancer","desc","initializeObservable","ObservableValue","_ann$options_$enhance","initializedObjects","add","WeakSet","has","setObservablePropValue_","init","createAutoAnnotation","computed","autoBind","observableAnnotation","deep","ref","_this$options_4","_this$options_5","_this$options_6","asCreateObservableOptions","defaultCreateObservableOptions","getEnhancerFromOptions","defaultDecorator","createObservable","arg2","arg3","box","actionName","res","executeAction","isFunctionNameConfigurable","tmpNameDescriptor","canRunAsDerivation","scope","runInfo","_startAction","err","error_","_endAction","prevDerivation_","trackingDerivation","runAsAction","startBatch","prevAllowStateChanges_","allowStateChanges","untrackedStart","allowStateChangesStart","runAsAction_","prevAllowStateReads_","allowStateReadsStart","notifySpy_","startTime_","actionId_","nextActionId","parentActionId_","currentActionId","suppressReactionErrors","allowStateChangesEnd","allowStateReadsEnd","endBatch","untrackedEnd","prev","isCaughtException","e","CaughtException","shouldCompute","derivation","dependenciesState_","IDerivationState_","UP_TO_DATE_","NOT_TRACKING_","STALE_","POSSIBLY_STALE_","prevAllowStateReads","prevUntracked","obs","observing_","l","i","isComputedValue","disableErrorBoundaries","changeDependenciesStateTo0","isComputingDerivation","trackDerivedFunction","f","newObserving_","unboundDepsCount_","runId_","runId","result","prevTracking","inBatch","prevObserving","observing","lowestNewObservingDerivationState","i0","dep","diffValue_","removeObserver","addObserver","onBecomeStale_","clearObserving","untracked","action","allowStateReads","lowestObserverState_","getGlobalState","resetGlobalState","defaultGlobals","MobXGlobals","persistentKeys","indexOf","enforceActions","node","observers_","size","queueForUnobservation","isPendingUnobservation_","pendingUnobservations","push","batchId","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","runReactions","list","isBeingObserved_","onBUO","suspend_","reportObserved","lastAccessedBy_","trackingContext","onBO","propagateChanged","forEach","d","onReactionError","handler","globalReactionErrorHandlers","idx","splice","isRunningReactions","reactionScheduler","runReactionsHelper","allReactions","pendingReactions","iterations","console","remainingReactions","runReaction_","spy","warn","createActionFactory","arg1","autoActionAnnotation","actionAnnotation","runInAction","autorun","view","opts","reactionRunner","reaction","EMPTY_OBJECT","_opts$name","_opts","scheduler","delay","createSchedulerFromOptions","isScheduled","Reaction","isDisposed_","track","onError","requiresObservable","_opts2","_opts2$signal","signal","aborted","schedule_","getDisposer_","_opts3","setTimeout","run","expression","effect","r","changed","nextValue","firstTime","equals","oldValue","fireImmediately","effectAction","errorHandler","baseFn","_opts$name2","runSync","compareStructural","comparer","structural","_opts4","_opts4$signal","_opts5","interceptHook","hook","getAtom","cb","listenersKey","hookListeners","configure","isolateGlobalState","isolateCalled","canMergeGlobalState","__mobxInstanceCount","__mobxGlobals","baseScheduler","useProxies","Proxy","verifyProxies","ea","observableRequiresReaction","extendObservable","properties","annotations","descriptors","getOwnPropertyDescriptors","initObservable","ownKeys","getDependencyTree","nodeToDependencyTree","name_","dependencies","from","getObserverTree","nodeToObserverTree","observers","FlowCancellationError","message","isFlowCancellationError","cancelPromise","promise","cancel","flowResult","interceptReads","propOrHandler","isObservableMap","isObservableArray","isObservableValue","getAdministration","isObservableObject","dehancer","intercept","intercept_","_isComputed","isComputed","isComputedProp","_isObservable","isAtom","isReaction","isObservableProp","keys","keys_","isObservableSet","index","values","slice","entries","set_","parseInt","remove","delete_","has_","get_","apiDefineProperty","apiOwnKeys","ownKeys_","observe","propOrCb","cbOrFire","listener","observe_","cache","toJS","toJSHelper","__alreadySeen","Date","propertyIsEnumerable","trace","transaction","thisArg","when","predicate","whenPromise","_when","timeoutHandle","timeout","disposer","dispose","clearTimeout","abort","_opts$signal","Promise","reject","resolve","_opts$signal2","addEventListener","_opts$signal3","removeEventListener","getAdm","hasInterceptors","interceptable","interceptors_","registerInterceptor","interceptors","interceptChange","change","prevU","concat","type","hasListeners","listenable","changeListeners_","registerListener","listeners","notifyListeners","makeObservable","makeAutoObservable","overrides","keysSymbol","createObservableArray","initialValues","owned","ObservableArrayAdministration","proxy","arrayTraps","spliceWithArray_","addArrayExtension","funcName","funcFactory","arrayExtensions","simpleFunc","atom_","dehancedValues","dehanceValues_","mapLikeFunc","callback","element","_this2","reduceLikeFunc","accumulator","currentValue","_this3","isObservableArrayAdministration","_options$name","ObservableObjectAdministration","_options$defaultDecor","getCachedObservablePropDescriptor","descriptorCache","isObservableObjectAdministration","recordAnnotationApplied","_adm$target_$storedAn","createArrayEntryDescriptor","createArrayBufferItem","LegacyObservableArray","reserveArrayBuffer","max","OBSERVABLE_ARRAY_BUFFER_SIZE","createLegacyArray","keysAtom_","data_","hasMap_","getDebugName","named","deepEqual","a","b","depth","eq","aStack","bStack","className","Symbol","valueOf","unwrap","areArrays","aCtor","bCtor","pop","makeIterable","iterator","getSelf","getDescriptor","getOwnPropertyDescriptor","EMPTY_ARRAY","freeze","hasGetOwnPropertySymbols","getOwnPropertySymbols","Reflect","getOwnPropertyNames","batchId_","onBOL","onBUOL","NaN","_proto","reportChanged","stateVersion","identity","default","is","shallow","override","autoAnnotation","observableRefAnnotation","observableShallowAnnotation","observableStructAnnotation","observableDecoratorAnnotation","o","ObservableMap","ObservableSet","props","decorators","_target$$mobx$proxy_","_target$$mobx","objectProxyTraps","struct","computedAnnotation","computedStructAnnotation","_getDescriptor$config","_getDescriptor","_Symbol$toPrimitive","_Atom","notifySpy","_this","hasUnreportedChange_","value_","_inheritsLoose","dehanceValue","prepareNewValue_","UNCHANGED","setNewValue_","UPDATE","observableKind","debugObjectName","raw","toJSON","TraceMode","triggeredBy_","isComputing_","isRunningSetter_","setter_","isTracing_","NONE","scope_","equals_","requiresReaction_","keepAlive_","requiresReaction","keepAlive","prevTrackingContext","trackAndCompute","warnAboutUntrackedRead_","computeValue_","cause","wasSuspended","prevValue","version","mobxGuid","spyListeners","computedRequiresReaction","reactionRequiresObservable","onInvalidate_","errorHandler_","requiresObservable_","isScheduled_","isTrackPending_","isRunning_","reportExceptionInDerivation_","prevReaction","abortSignal","actionBoundAnnotation","autoActionBoundAnnotation","generatorId","create","flowAnnotation","flowBoundAnnotation","generator","rejector","ctx","gen","pendingPromise","onFulfilled","ret","stepId","next","onRejected","then","done","yieldedPromise","_getAdm$set_","deleteProperty","_getAdm$delete_","_getAdm$definePropert","preventExtensions","getArrayLength_","isNaN","setArrayLength_","owned_","legacyMode_","enhancer_","lastKnownLength_","newV","oldV","dehanceValue_","added","addedCount","removed","removedCount","newLength","currentLength","newItems","updateArrayLength_","oldLength","delta","deleteCount","Math","min","lengthDelta","spliceItemsIntoValues_","notifyArraySplice_","_this$values_","oldItems","notifyArrayChildUpdate_","notify","clear","replace","spliceWithArray","_len2","items","_key2","shift","unshift","_len3","_key3","reverse","sort","copy","ObservableMapMarker","ADD","_Symbol$iterator","_Symbol$toStringTag","toStringTag","initialData","merge","entry","newEntry","hasKey","updateValue_","addValue_","_this3$hasMap_$get","_this4","_this4$hasMap_$get","_keys$next","_keys$next2","_step","_iterator","_createForOfIteratorHelperLoose","_step$value","other","symbols","filter","s","_this5","_ref","_step2","_iterator2","_this6","_step3","replacementMap","dataStructure","orderedData","keysReportChangedCalled","_iterator3","_this7","_step4","_iterator4","_step4$value","keyExisted","iter1","iter2","next1","next2","_createClass","ObservableSetMarker","ctor","callbackFn","nextIndex","observableValues","defaultAnnotation_","appliedAnnotations_","pendingKeys_","_this$target_$storedA","outcome","deleteOutcome","notifyPropertyAddition_","cachedDescriptor","_this$pendingKeys_","_this$pendingKeys_$ge","_this$pendingKeys_2","_this$pendingKeys_2$g","ENTRY_0","safariPrototypeSetterInheritanceBug","p","StubArray","setPrototypeOf","__proto__","_StubArray","_assertThisInitialized","arrays","__MOBX_DEVTOOLS_GLOBAL_HOOK__","injectMobx","extras"],"mappings":"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"}