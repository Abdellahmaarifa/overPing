{
  "version": 3,
  "sources": ["../../@apollo/src/link/core/ApolloLink.ts"],
  "sourcesContent": ["import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\n\nimport type { Observer } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest,\n} from \"./types.js\";\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from \"../utils/index.js\";\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink((operation) => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation))\n        )\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        `You are calling concat on a terminating link, which will have no effect %o`,\n        firstLink\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        (operation) =>\n          firstLink.request(\n            operation,\n            (op) => nextLink.request(op) || Observable.of()\n          ) || Observable.of()\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, (op) => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink\n  ): Observable<FetchResult> | null {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"],
  "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",
  "names": ["ApolloLink"]
}
