version: "3.7"
services:
  # CLIENT SERVICE FOR PRODUCTION #
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    networks:
      - webapp
    ports:
      - 80:80
    restart: always
    container_name: client
    profiles:
      - production
  # # CLIENT SERVICE FOR DEVELOPMENT #
  # client-dev:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #     target: development
  #   # env_file:
  #     # - ./client/.env
  #   volumes:
  #     - ./client/node_modules:/app/node_modules
  #     - ./client/src:/app/src
  #     - ./client/public:/app/public
  #   networks:
  #     - webapp
  #   ports:
  #     - 5173:5173
  #   command: npm run dev
  #   stdin_open: true
  #   restart: always
  #   container_name: client
  #   profiles:
  #     - development

  # DATABASE SERVICE FOR PRODUCTION & DEVELOPMENT #
  postgres_auth_db:
    image: postgres

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_DB_PROT}:5432"
    volumes:
      - ./database/data/auth:/var/lib/postgresql/data/
    restart: always
    networks:
      - webapp
    container_name: postgres_auth_db
    profiles:
      - production
      - development

  #   DATABASE SERVICE FOR MEDIA DEV AND PROD #

  # postgres_media_db:
  #   image: postgres

  #   environment:
  #     - POSTGRES_DB=${MEDIA_DB_NAME}
  #     - POSTGRES_USER=${MEDIA_DB_USER}
  #     - POSTGRES_PASSWORD=${MEDIA_DB_PASSWORD}
  #   ports:
  #     - "${MEDIA_DB_PORT}:5432"
  #   volumes:
  #     - ./database/data/media:/var/lib/postgresql/data/
  #   restart: always
  #   networks:
  #     - webapp
  #   container_name: postgres_media_db
  #   profiles:
  #     - production
  #     - development

  #   DATABASE SERVICE FOR PROFILE DEV AND PROD #

  postgress_profile_db:
    image: postgres
    container_name: postgress_profile_db

    environment:
      - POSTGRES_DB=${PROFILE_DB_NAME}
      - POSTGRES_USER=${PROFILE_DB_USER}
      - POSTGRES_PASSWORD=${PROFILE_DB_PASSWORD}
    ports:
      - "${PROFILE_DB_PORT}:5432"
    networks:
      - webapp
    volumes:
      - ./database/data/profile:/var/lib/postgresql/data/
    restart: always
    profiles:
      - production
      - development

  #   DATABASE SERVICE FOR FRIEND DEV AND PROD #

  postgres_friend_db:
    image: postgres

    environment:
      - POSTGRES_DB=${FRIEND_DB_NAME}
      - POSTGRES_USER=${FRIEND_DB_USER}
      - POSTGRES_PASSWORD=${FRIEND_DB_PASSWORD}
    ports:
      - "${FRIEND_DB_PORT}:5432"
    volumes:
      - ./database/data/friend:/var/lib/postgresql/data/
    restart: always
    networks:
      - webapp
    container_name: postgres_friend_db
    profiles:
      - production
      - development


  # DATABASE SERVICE FOR CHAT DEV AND PROD #
  postgres_chat_db:
    image: postgres
    container_name: postgres_chat_db
    env_file:
      - ./api/.env
    environment:
      - POSTGRES_DB=${CHAT_DB_NAME}
      - POSTGRES_USER=${CHAT_DB_USER}
      - POSTGRES_PASSWORD=${CHAT_DB_PASSWORD}
    ports:
      -  "${CHAT_DB_PORT}:5432"
    networks:
      - webapp
    volumes:
      - ./database/data/chat:/var/lib/postgresql/data/
    restart: always
    profiles:
      - production
      - development


  # GATEWAY SERVICE FOR PRODUCTION #
  # gateway:
  #   build:
  #     context: ./api/apps/gateway
  #     dockerfile: Dockerfile
  #   networks:
  #     - webapp
  #     - database
  #   restart: always
  #   command: [ 'node', 'main.js']
  #   container_name: gateway
  #   profiles:
  #     - production
  # GATEWAY SERVICE FOR DEVELOPMENT #
  gateway:
    build:
      context: ./api
      dockerfile: ./apps/gateway/Dockerfile
      target: development
    command: yarn start:dev gateway
    env_file:
      - ./api/.env
    networks:
      - webapp
    ports:
      - ${GATEWAY_PORT}:5500
    volumes:
      - ./api/apps/gateway:/usr/src/app/apps/gateway
      - ./api/libs:/usr/src/app/libs
    depends_on:
      - rabbitmq
    restart: always
    container_name: gateway
    profiles:
      - development
      - production

  # AUTH SERVICE FOR DEVELOPMENT #
  auth:
    build:
      context: ./api
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: yarn start:dev auth
    env_file:
      - ./api/.env
    networks:
      - webapp
    ports:
      - ${AUTH_PORT}:3001
      - ${PRISMA_STUDIO_PORT}:5555

    volumes:
      - ./api/apps/auth:/usr/src/app/apps/auth
      - ./api/libs:/usr/src/app/libs
    depends_on:
      - rabbitmq
      - postgres_auth_db
      - gateway
    restart: always
    container_name: auth
    profiles:
      - development
      - production

  # PROFILE SERVICE FOR DEVELOPMENT #
  profile:
    build:
      context: ./api
      dockerfile: ./apps/profile/Dockerfile
      target: development
    command: yarn start:dev profile
    env_file:
      - ./api/.env
    networks:
      - webapp
    ports:
      - ${PROFILE_PORT}:3003
      - ${PRISMA_STUDIO_PROFILE_PORT}:5555

    volumes:
      - ./api/apps/profile:/usr/src/app/apps/profile
      - ./api/libs:/usr/src/app/libs
    depends_on:
      - rabbitmq
      - postgress_profile_db
      - gateway
    restart: always
    container_name: profile
    profiles:
      - development
      - production

  # MATCHMAKING SERVICE FOR DEVELOPMENT #
  matchmaking:
    build:
      context: ./api
      dockerfile: ./apps/matchmaking/Dockerfile
      target: development
    command: yarn start:dev matchmaking
    container_name: matchmaking
    env_file:
      - ./api/.env
    networks:
      - webapp
    volumes:
      - ./api/apps/matchmaking:/usr/src/app/apps/matchmaking
      - ./api/libs:/usr/src/app/libs
    depends_on:
      - rabbitmq
      - gateway
    restart: always
    profiles:
      - development
      - production

  # MEDIA SERVICE FOR DEVELOPMENT #

  media:
    build:
      context: ./api
      dockerfile: ./apps/media/Dockerfile
      target: development
    command: yarn start:dev media
    container_name: media
    env_file:
      - ./api/.env
    ports:
      - ${PRISMA_STUDIO_MEDIA_PORT}:5555
    networks:
      - webapp
    volumes:
      - ./api/apps/media:/usr/src/app/apps/media
      - ./api/libs:/usr/src/app/libs
      - ./api/apps/media/uploads:/usr/src/app/apps/media/uploads
    depends_on:
      - rabbitmq
      - gateway
    restart: always
    profiles:
      - development
      - production

  # FRIEND SERVICE FOR DEVELOPMENT #

  friend:
    build:
      context: ./api
      dockerfile: ./apps/friend/Dockerfile
      target: development
    command: yarn start:dev friend
    container_name: friend
    env_file:
      - ./api/.env
    ports:
      - ${PRISMA_STUDIO_FRIEND_PORT}:5555
    networks:
      - webapp
    volumes:
      - ./api/apps/friend:/usr/src/app/apps/friend
      - ./api/libs:/usr/src/app/libs
    depends_on:
      - rabbitmq
      - gateway
      - auth
    restart: always
    profiles:
      - development
      - production

  # CHAT SERVICE FOR DEVELOPMENT #
  chat:
    build:
      context: ./api
      dockerfile: ./apps/chat/Dockerfile
      target: development
    command: yarn start:dev chat
    env_file:
      - ./api/.env
    networks:
      - webapp
    ports:
      - ${CHAT_PORT}:3005
      - ${PRISMA_STUDIO_CHAT_PORT}:5555
      
    volumes:
      - ./api:/usr/src/app
    depends_on:
      - rabbitmq
      - postgres_chat_db
      - gateway
    restart: always
    container_name: chat
    profiles:
      - development
      - production

  # RABBBITMQ SERVER #
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}
      - MESSAGE_BUS=amqp://rabbitmq
    restart: always
    env_file:
      - ./api/.env
    networks:
      - webapp
    ports:
      - "${RABBIT_MQ_PORT}:5672"
      - ${RABBITMQ_AMQP_PORT}:15672
    container_name: rabbitmq
    profiles:
      - development
      - production

networks:
  webapp:
    driver: bridge
  database:
    driver: bridge
