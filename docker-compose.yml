version: "3.7"
services:
  # CLIENT SERVICE FOR PRODUCTION #
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    networks:
      - webapp
    ports:
      - 8080:8080
    restart: always
    container_name: client
    profiles:
      - production
      - development

  # DATABASE SERVICE FOR PRODUCTION & DEVELOPMENT #
  postgres_auth_db:
    image: postgres

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_DB_PROT}:5432"
    volumes:
      - ./database/data/auth:/var/lib/postgresql/data/
    env_file:
      - .env
    restart: always
    networks:
      - webapp
    container_name: postgres_auth_db
    profiles:
      - production
      - development

  #   DATABASE SERVICE FOR PROFILE DEV AND PROD #

  postgress_profile_db:
    image: postgres
    container_name: postgress_profile_db

    environment:
      - POSTGRES_DB=${PROFILE_DB_NAME}
      - POSTGRES_USER=${PROFILE_DB_USER}
      - POSTGRES_PASSWORD=${PROFILE_DB_PASSWORD}
    ports:
      - "${PROFILE_DB_PORT}:5432"
    networks:
      - webapp
    volumes:
      - ./database/data/profile:/var/lib/postgresql/data/
    env_file:
      - .env
    restart: always
    profiles:
      - production
      - development

  # DATABASE SERVICE FOR CHAT DEV AND PROD #
  postgres_chat_db:
    image: postgres
    container_name: postgres_chat_db
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${CHAT_DB_NAME}
      - POSTGRES_USER=${CHAT_DB_USER}
      - POSTGRES_PASSWORD=${CHAT_DB_PASSWORD}
    ports:
      - "${CHAT_DB_PORT}:5432"
    networks:
      - webapp
    volumes:
      - ./database/data/chat:/var/lib/postgresql/data/
    restart: always
    profiles:
      - production
      - development

  gateway:
    build:
      context: ./api
      dockerfile: ./apps/gateway/Dockerfile
      target: production
<<<<<<< HEAD
    command: yarn start:dev gateway
=======
>>>>>>> 94a7a27e6273969ad3b6f1e74f12a85389dcd037
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${GATEWAY_PORT}:5500
    volumes:
      - ./api/apps/gateway:/usr/src/app/apps/gateway
      - ./api/libs:/usr/src/app/libs
    depends_on:
      chat:
        condition: service_started
      media:
        condition: service_started
      matchmaking:
        condition: service_started
      auth:
        condition: service_started
      profile:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always
    container_name: gateway
    profiles:
      - development
      - production

  # AUTH SERVICE FOR DEVELOPMENT #
  auth:
    build:
      context: ./api
      dockerfile: ./apps/auth/Dockerfile
      # target: production
    # command: yarn start:dev auth
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${AUTH_PORT}:3001
      - ${PRISMA_STUDIO_PORT}:5555

    volumes:
      - ./api/apps/auth:/usr/src/app/apps/auth
      - ./api/libs:/usr/src/app/libs
    depends_on:
      postgres_auth_db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always
    container_name: auth
    profiles:
      - development
      - production

  # PROFILE SERVICE FOR DEVELOPMENT #
  profile:
    build:
      context: ./api
      dockerfile: ./apps/profile/Dockerfile
      target: production
    # command: yarn start:dev profile
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${PROFILE_PORT}:3003
      - ${PRISMA_STUDIO_PROFILE_PORT}:5555
    volumes:
      - ./api/apps/profile:/usr/src/app/apps/profile
      - ./api/libs:/usr/src/app/libs

    depends_on:
      postgress_profile_db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always
    container_name: profile
    profiles:
      - development
      - production

  # MATCHMAKING SERVICE FOR DEVELOPMENT #
  matchmaking:
    build:
      context: ./api
      dockerfile: ./apps/matchmaking/Dockerfile
      target: production
    # command: yarn start:dev matchmaking
    container_name: matchmaking
    env_file:
      - .env
    networks:
      - webapp
    volumes:
      - ./api/apps/matchmaking:/usr/src/app/apps/matchmaking
      - ./api/libs:/usr/src/app/libs
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    profiles:
      - development
      - production

  # MEDIA SERVICE FOR DEVELOPMENT #

  media:
    build:
      context: ./api
      dockerfile: ./apps/media/Dockerfile
      target: production
    # command: yarn start:dev media
    container_name: media
    env_file:
      - .env
    ports:
      - ${PRISMA_STUDIO_MEDIA_PORT}:5555
    networks:
      - webapp
    volumes:
      - ./api/apps/media:/usr/src/app/apps/media
      - ./api/libs:/usr/src/app/libs
      - ./api/apps/media/uploads:/usr/src/app/apps/media/uploads
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    profiles:
      - development
      - production

  # CHAT SERVICE FOR DEVELOPMENT #
  chat:
    build:
      context: ./api
      dockerfile: ./apps/chat/Dockerfile
      target: production
    # command: yarn start:dev chat
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${CHAT_PORT}:3005
      - ${PRISMA_STUDIO_CHAT_PORT}:5555

    volumes:
      - ./api/apps/chat:/usr/src/app/apps/chat
      - ./api/libs:/usr/src/app/libs

    depends_on:
      postgres_chat_db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

    restart: always
    container_name: chat
    profiles:
      - development
      - production

  # RABBBITMQ SERVER #
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}
      - MESSAGE_BUS=amqp://rabbitmq
    restart: always
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - "${RABBIT_MQ_PORT}:5672"
      - ${RABBITMQ_AMQP_PORT}:15672
    container_name: rabbitmq
    profiles:
      - development
      - production
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 10

  game_history_db:
    image: postgres
    container_name: game_history_db
    environment:
      - POSTGRES_USER=${POSTGRES_H_USER}
      - POSTGRES_PASSWORD=${POSTGRES_H_PASSWORD}
      - POSTGRES_DB=${POSTGRES_H_DB}
      - POSTGRES_HOST=${POSTGRES_H_HOST}
    volumes:
      - ./database/data/game:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - webapp
    ports:
      - ${POSTGRES_HISTORY_PORT}:5432
    restart: always

  game:
    container_name: theGame
    build:
      context: ./api
      dockerfile: ./apps/game/Dockerfile
      target: production
    # command: yarn start:dev game
    env_file:
      - .env
    ports:
      - "4055:4055"
      - ${PRISMA_STUDIO_HISTORY_PORT}:5555
    volumes:
      - ./api/apps/game:/usr/src/app/apps/game
      - ./api/libs:/usr/src/app/libs
      - ./api/apps/game/prisma/migrations:/usr/src/app/apps/game/prisma/migrations

    depends_on:
      game_history_db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - webapp
    profiles:
      - development
      - production
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgAdminConsole
    env_file:
      - .env
    ports:
      - "5050:80"
    networks:
      - webapp
    restart: always

networks:
  webapp:
    driver: bridge
  database:
    driver: bridge
